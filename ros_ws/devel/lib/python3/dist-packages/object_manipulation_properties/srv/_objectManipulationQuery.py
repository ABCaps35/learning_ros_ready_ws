# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_manipulation_properties/objectManipulationQueryRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class objectManipulationQueryRequest(genpy.Message):
  _md5sum = "1af4ac3c428b910ced7b9b3f33495ecb"
  _type = "object_manipulation_properties/objectManipulationQueryRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#objectManipulationQuery service message codes
#send request as a query, e.g., what types of grasp strategies are available
# for specified object_ID and gripper_ID? 

uint8 TEST_PING = 0
uint8 GRASP_STRATEGY_OPTIONS_QUERY = 1
uint8 APPROACH_STRATEGY_OPTIONS_QUERY = 2
uint8 DEPART_STRATEGY_OPTIONS_QUERY = 3

uint8 GET_GRASP_POSE_TRANSFORMS = 10
uint8 GET_APPROACH_POSE_TRANSFORMS = 11
uint8 GET_DEPART_POSE_TRANSFORMS =12

#grasp options
int32 GRASP_FROM_ABOVE = 0 #grasp object from above, e.g. toy block; applicable to vacuum-gripper approach
                                #along direction normal to object towards grasp pose
int32 GRASP_FROM_SIDE = 1 #e.g., grab a bottle in power grasp, or slide a hook sideways in/under object 

#approach/depart options: must be same as corresponding response codes below
int32 APPROACH_Z_TOOL= 11  #e.g., descend vertically to part along tool-z axis
int32 DEPART_Z_TOOL = 12   # depart from object along neg tool-z axis
int32 APPROACH_LATERAL_SLIDE = 21 #approach grasp pose by sliding along axis btwn fingertips
int32 DEPART_LATERAL_SLIDE = 22  #depart grasp pose by sliding along axis btwn fingertips

int32 object_ID
int32 gripper_ID
uint8 query_code
int32 grasp_option

"""
  # Pseudo-constants
  TEST_PING = 0
  GRASP_STRATEGY_OPTIONS_QUERY = 1
  APPROACH_STRATEGY_OPTIONS_QUERY = 2
  DEPART_STRATEGY_OPTIONS_QUERY = 3
  GET_GRASP_POSE_TRANSFORMS = 10
  GET_APPROACH_POSE_TRANSFORMS = 11
  GET_DEPART_POSE_TRANSFORMS = 12
  GRASP_FROM_ABOVE = 0
  GRASP_FROM_SIDE = 1
  APPROACH_Z_TOOL = 11
  DEPART_Z_TOOL = 12
  APPROACH_LATERAL_SLIDE = 21
  DEPART_LATERAL_SLIDE = 22

  __slots__ = ['object_ID','gripper_ID','query_code','grasp_option']
  _slot_types = ['int32','int32','uint8','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_ID,gripper_ID,query_code,grasp_option

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(objectManipulationQueryRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object_ID is None:
        self.object_ID = 0
      if self.gripper_ID is None:
        self.gripper_ID = 0
      if self.query_code is None:
        self.query_code = 0
      if self.grasp_option is None:
        self.grasp_option = 0
    else:
      self.object_ID = 0
      self.gripper_ID = 0
      self.query_code = 0
      self.grasp_option = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2iBi().pack(_x.object_ID, _x.gripper_ID, _x.query_code, _x.grasp_option))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.object_ID, _x.gripper_ID, _x.query_code, _x.grasp_option,) = _get_struct_2iBi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2iBi().pack(_x.object_ID, _x.gripper_ID, _x.query_code, _x.grasp_option))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.object_ID, _x.gripper_ID, _x.query_code, _x.grasp_option,) = _get_struct_2iBi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2iBi = None
def _get_struct_2iBi():
    global _struct_2iBi
    if _struct_2iBi is None:
        _struct_2iBi = struct.Struct("<2iBi")
    return _struct_2iBi
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_manipulation_properties/objectManipulationQueryResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class objectManipulationQueryResponse(genpy.Message):
  _md5sum = "f2db4a08ed98eb88a20887ea04f035c4"
  _type = "object_manipulation_properties/objectManipulationQueryResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 QUERY_SUCCESSFUL =0
int32 QUERY_NOT_VALID = 1
int32 APPROACH_Z_TOOL= 11  #e.g., descend vertically to part along tool-z axis
int32 DEPART_Z_TOOL = 12   # depart from object along neg tool-z axis
int32 APPROACH_LATERAL_SLIDE = 21 #approach grasp pose by sliding along axis btwn fingertips
int32 DEPART_LATERAL_SLIDE = 22  #depart grasp pose by sliding along axis btwn fingertips

int32 GRASP_FROM_ABOVE = 0 #grasp object from above, e.g. toy block; applicable to vacuum-gripper approach
                                #along direction normal to object towards grasp pose
int32 GRASP_FROM_SIDE = 1 #e.g., grab a bottle in power grasp, or slide a hook sideways in/under object 

#int32 GRASP_OPTIONS_TOOL_ROTZ = 1 #cue that other grasp options correspond to tool-z rotation, e.g. grabbing a ball,
                                  #or vacuum-gripper rot about z axis options
#int32 GRASP_OPTIONS_OBJECT_ROTZ = 2 #cue that can grab/approach object from arbitrary angle about object z-axis,
                                 #e.g. power grasp of a bottle does not care about polar angle of grasp
#int32 GRASP_OPTIONS_DZ = 3 #for approach_z_tool, can specify range of z values relative to object frame:

bool valid_reply
int32[] grasp_strategy_options  #these are codes: GRASP_FROM_ABOVE or GRASP_FROM_SIDE, 
    #APPROACH_Z_TOOL, APPROACH_LATERAL_SLIDE...options relevant to inquiry


#return grasp transform for specified object, specified gripper, and specified grasp strategy
#if this field is returned empty, then the specified gripper cannot grasp the specified object
#alternatively, may have multiple, discrete options--with tolerances
geometry_msgs/Pose[] gripper_pose_options  #for a given grasp strategy, e.g. from above, can still have
                                               #discrete possibilities, e.g. 4 poses for a square block,
                                               #2 poses for a long block; 6 poses for a hexagonal block, etc
                                               # can be as simple as unique required grasp pose
#re-use gripper_pose_options for approach and depart inquiries
#geometry_msgs/PoseStamped des_depart_transform  #e.g., pure depart along z-axis is same xform, regardless of grasp pose
#geometry_msgs/PoseStamped des_approach_transform #ditto
#tolerances on grasp pose: can set these to zero by default--> mandates use of specified grasp pose(s)
#can specify these tolerances for each listed, discrete grasp solution
#or, if length=0, do not allow tolerances for any listed grasp transform
float64[] tool_rotz_max        #valid grasp options may include range of tool-z-rot angles, e.g. grasping ball from above
float64[] tool_rotz_min        #can specify min and max tool-z-rot angles
float64[] object_rotz_max      #e.g., can approach an upright cylinder from the side, w/ arbitrary radial approach dir
float64[] object_rotz_min      #can specify polar angle range allowed for such approach
float64[] tool_dz_max           #fingertips/gripper origin displacement along tool-z has some tolerance, min-max
float64[] tool_dz_min          #relative to nominal grasp pose 
float64[] tool_dslide_max      #tolerance, +/- for grasp in tool lateral direction
float64[] tool_dslide_min


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  QUERY_SUCCESSFUL = 0
  QUERY_NOT_VALID = 1
  APPROACH_Z_TOOL = 11
  DEPART_Z_TOOL = 12
  APPROACH_LATERAL_SLIDE = 21
  DEPART_LATERAL_SLIDE = 22
  GRASP_FROM_ABOVE = 0
  GRASP_FROM_SIDE = 1

  __slots__ = ['valid_reply','grasp_strategy_options','gripper_pose_options','tool_rotz_max','tool_rotz_min','object_rotz_max','object_rotz_min','tool_dz_max','tool_dz_min','tool_dslide_max','tool_dslide_min']
  _slot_types = ['bool','int32[]','geometry_msgs/Pose[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid_reply,grasp_strategy_options,gripper_pose_options,tool_rotz_max,tool_rotz_min,object_rotz_max,object_rotz_min,tool_dz_max,tool_dz_min,tool_dslide_max,tool_dslide_min

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(objectManipulationQueryResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid_reply is None:
        self.valid_reply = False
      if self.grasp_strategy_options is None:
        self.grasp_strategy_options = []
      if self.gripper_pose_options is None:
        self.gripper_pose_options = []
      if self.tool_rotz_max is None:
        self.tool_rotz_max = []
      if self.tool_rotz_min is None:
        self.tool_rotz_min = []
      if self.object_rotz_max is None:
        self.object_rotz_max = []
      if self.object_rotz_min is None:
        self.object_rotz_min = []
      if self.tool_dz_max is None:
        self.tool_dz_max = []
      if self.tool_dz_min is None:
        self.tool_dz_min = []
      if self.tool_dslide_max is None:
        self.tool_dslide_max = []
      if self.tool_dslide_min is None:
        self.tool_dslide_min = []
    else:
      self.valid_reply = False
      self.grasp_strategy_options = []
      self.gripper_pose_options = []
      self.tool_rotz_max = []
      self.tool_rotz_min = []
      self.object_rotz_max = []
      self.object_rotz_min = []
      self.tool_dz_max = []
      self.tool_dz_min = []
      self.tool_dslide_max = []
      self.tool_dslide_min = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.valid_reply
      buff.write(_get_struct_B().pack(_x))
      length = len(self.grasp_strategy_options)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.grasp_strategy_options))
      length = len(self.gripper_pose_options)
      buff.write(_struct_I.pack(length))
      for val1 in self.gripper_pose_options:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.tool_rotz_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_rotz_max))
      length = len(self.tool_rotz_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_rotz_min))
      length = len(self.object_rotz_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.object_rotz_max))
      length = len(self.object_rotz_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.object_rotz_min))
      length = len(self.tool_dz_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_dz_max))
      length = len(self.tool_dz_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_dz_min))
      length = len(self.tool_dslide_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_dslide_max))
      length = len(self.tool_dslide_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_dslide_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gripper_pose_options is None:
        self.gripper_pose_options = None
      end = 0
      start = end
      end += 1
      (self.valid_reply,) = _get_struct_B().unpack(str[start:end])
      self.valid_reply = bool(self.valid_reply)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.grasp_strategy_options = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gripper_pose_options = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.gripper_pose_options.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_rotz_max = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_rotz_min = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_rotz_max = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_rotz_min = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dz_max = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dz_min = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dslide_max = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dslide_min = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.valid_reply
      buff.write(_get_struct_B().pack(_x))
      length = len(self.grasp_strategy_options)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.grasp_strategy_options.tostring())
      length = len(self.gripper_pose_options)
      buff.write(_struct_I.pack(length))
      for val1 in self.gripper_pose_options:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.tool_rotz_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_rotz_max.tostring())
      length = len(self.tool_rotz_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_rotz_min.tostring())
      length = len(self.object_rotz_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.object_rotz_max.tostring())
      length = len(self.object_rotz_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.object_rotz_min.tostring())
      length = len(self.tool_dz_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_dz_max.tostring())
      length = len(self.tool_dz_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_dz_min.tostring())
      length = len(self.tool_dslide_max)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_dslide_max.tostring())
      length = len(self.tool_dslide_min)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_dslide_min.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gripper_pose_options is None:
        self.gripper_pose_options = None
      end = 0
      start = end
      end += 1
      (self.valid_reply,) = _get_struct_B().unpack(str[start:end])
      self.valid_reply = bool(self.valid_reply)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.grasp_strategy_options = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gripper_pose_options = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.gripper_pose_options.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_rotz_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_rotz_min = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_rotz_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.object_rotz_min = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dz_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dz_min = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dslide_max = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_dslide_min = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class objectManipulationQuery(object):
  _type          = 'object_manipulation_properties/objectManipulationQuery'
  _md5sum = '00b4b08f066e8274009b927a6e082179'
  _request_class  = objectManipulationQueryRequest
  _response_class = objectManipulationQueryResponse

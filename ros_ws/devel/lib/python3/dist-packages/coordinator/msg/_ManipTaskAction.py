# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from coordinator/ManipTaskAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import coordinator.msg
import genpy
import geometry_msgs.msg
import std_msgs.msg

class ManipTaskAction(genpy.Message):
  _md5sum = "b0d72a10459cfe87a5243cfd55aca4ab"
  _type = "coordinator/ManipTaskAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

ManipTaskActionGoal action_goal
ManipTaskActionResult action_result
ManipTaskActionFeedback action_feedback

================================================================================
MSG: coordinator/ManipTaskActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
ManipTaskGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: coordinator/ManipTaskGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal: specify object code, perception type (incl blind), dropoff location, optional pickup location
#task codes:
int32 PCL_VISION = 1 # could have more camera sources to refer to
int32 BLIND_MANIP = 2 #expect pose specified in pickup_location field

#action codes:
int32 GET_PICKUP_POSE = 1 #low level ops; maybe don't implement
int32 WAIT_FOR_FINDER = 101

int32 FIND_TABLE_SURFACE = 2 #do this once, and re-use result for multiple objects
int32 WAIT_FIND_TABLE_SURFACE = 102

int32 GRAB_OBJECT = 3 #assumes use of current pickup pose,
                      #whether provided for "blind" manip, or found
                      #from use of PCL_VISION
int32 WAIT_FOR_GRAB_OBJECT = 103    
                 
int32 DROPOFF_OBJECT = 4 #must provide dropoff_frame in goal msg
int32 WAIT_FOR_DROPOFF_OBJECT = 104

#int32 MANIP_OBJECT = 5 #macro: does perception, grab, and dropoff
                       #MUST provide dropoff frame, and means to
                       #get pickup_frame

int32 STRADDLE_OBJECT = 8 #test mode--simply straddle object, but don't grasp it
int32 WAIT_FOR_STRADDLE_OBJECT = 108

int32 CART_MOVE_TO_GRIPPER_POSE = 9
int32 WAIT_FOR_CART_MOVE = 109
                       
int32 NO_CURRENT_TASK = 6
int32 MOVE_TO_PRE_POSE = 7
int32 WAIT_FOR_MOVE_TO_PREPOSE = 107
int32 WAIT_FOR_MOVE = 107 #generic wait-for-move status

int32 ABORT= 666

#goal specification:
int32 action_code #what action should be performed?
int32 object_code #refer to a-priori known object types by object-ID codes
geometry_msgs/PoseStamped pickup_frame #specify object coords for pickup 
geometry_msgs/PoseStamped dropoff_frame #specify desired drop-off coords of object's frame
geometry_msgs/PoseStamped gripper_goal_frame #a goal frame to move gripper
int32 perception_source  #e.g. name a camera source

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: coordinator/ManipTaskActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
ManipTaskResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: coordinator/ManipTaskResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#return codes:
int32 MANIP_SUCCESS = 0
int32 FAILED_PERCEPTION = 1
int32 FAILED_PICKUP_PLAN =2 
int32 FAILED_DROPOFF_PLAN=3
int32 FAILED_PICKUP=4
int32 FAILED_DROPOFF=5
int32 DROPPED_OBJECT = 6
int32 ABORTED = 7
int32 PENDING = 8
int32 FAILED_MOVE = 9

int32 manip_return_code
int32 object_grabber_return_code
geometry_msgs/PoseStamped des_gripper_pose
int32 object_finder_return_code
geometry_msgs/PoseStamped object_pose


================================================================================
MSG: coordinator/ManipTaskActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
ManipTaskFeedback feedback

================================================================================
MSG: coordinator/ManipTaskFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback codes:  perception_busy; planning_busy; pickup_busy; dropoff_busy
int32 RECEIVED_NEW_TASK = 0
int32 PERCEPTION_BUSY = 1
int32 PICKUP_PLANNING_BUSY = 2
int32 PICKUP_MOTION_BUSY = 3
int32 PICKUP_SUCCESSFUL = 103
int32 DROPOFF_PLANNING_BUSY = 4
int32 DROPOFF_MOTION_BUSY = 5
int32 NO_CURRENT_TASK = 6
int32 ABORTED = 7
int32 COMPLETED_MOVE = 8
int32 COMPLETED_DROPOFF = 9
int32 PREPOSE_MOVE_BUSY = 10
int32 MOVE_BUSY = 11


int32 feedback_status

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['coordinator/ManipTaskActionGoal','coordinator/ManipTaskActionResult','coordinator/ManipTaskActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManipTaskAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = coordinator.msg.ManipTaskActionGoal()
      if self.action_result is None:
        self.action_result = coordinator.msg.ManipTaskActionResult()
      if self.action_feedback is None:
        self.action_feedback = coordinator.msg.ManipTaskActionFeedback()
    else:
      self.action_goal = coordinator.msg.ManipTaskActionGoal()
      self.action_result = coordinator.msg.ManipTaskActionResult()
      self.action_feedback = coordinator.msg.ManipTaskActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.action_goal.goal.action_code, _x.action_goal.goal.object_code, _x.action_goal.goal.pickup_frame.header.seq, _x.action_goal.goal.pickup_frame.header.stamp.secs, _x.action_goal.goal.pickup_frame.header.stamp.nsecs))
      _x = self.action_goal.goal.pickup_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.pickup_frame.pose.position.x, _x.action_goal.goal.pickup_frame.pose.position.y, _x.action_goal.goal.pickup_frame.pose.position.z, _x.action_goal.goal.pickup_frame.pose.orientation.x, _x.action_goal.goal.pickup_frame.pose.orientation.y, _x.action_goal.goal.pickup_frame.pose.orientation.z, _x.action_goal.goal.pickup_frame.pose.orientation.w, _x.action_goal.goal.dropoff_frame.header.seq, _x.action_goal.goal.dropoff_frame.header.stamp.secs, _x.action_goal.goal.dropoff_frame.header.stamp.nsecs))
      _x = self.action_goal.goal.dropoff_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.dropoff_frame.pose.position.x, _x.action_goal.goal.dropoff_frame.pose.position.y, _x.action_goal.goal.dropoff_frame.pose.position.z, _x.action_goal.goal.dropoff_frame.pose.orientation.x, _x.action_goal.goal.dropoff_frame.pose.orientation.y, _x.action_goal.goal.dropoff_frame.pose.orientation.z, _x.action_goal.goal.dropoff_frame.pose.orientation.w, _x.action_goal.goal.gripper_goal_frame.header.seq, _x.action_goal.goal.gripper_goal_frame.header.stamp.secs, _x.action_goal.goal.gripper_goal_frame.header.stamp.nsecs))
      _x = self.action_goal.goal.gripper_goal_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di3I().pack(_x.action_goal.goal.gripper_goal_frame.pose.position.x, _x.action_goal.goal.gripper_goal_frame.pose.position.y, _x.action_goal.goal.gripper_goal_frame.pose.position.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.x, _x.action_goal.goal.gripper_goal_frame.pose.orientation.y, _x.action_goal.goal.gripper_goal_frame.pose.orientation.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.w, _x.action_goal.goal.perception_source, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.action_result.result.manip_return_code, _x.action_result.result.object_grabber_return_code, _x.action_result.result.des_gripper_pose.header.seq, _x.action_result.result.des_gripper_pose.header.stamp.secs, _x.action_result.result.des_gripper_pose.header.stamp.nsecs))
      _x = self.action_result.result.des_gripper_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di3I().pack(_x.action_result.result.des_gripper_pose.pose.position.x, _x.action_result.result.des_gripper_pose.pose.position.y, _x.action_result.result.des_gripper_pose.pose.position.z, _x.action_result.result.des_gripper_pose.pose.orientation.x, _x.action_result.result.des_gripper_pose.pose.orientation.y, _x.action_result.result.des_gripper_pose.pose.orientation.z, _x.action_result.result.des_gripper_pose.pose.orientation.w, _x.action_result.result.object_finder_return_code, _x.action_result.result.object_pose.header.seq, _x.action_result.result.object_pose.header.stamp.secs, _x.action_result.result.object_pose.header.stamp.nsecs))
      _x = self.action_result.result.object_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_result.result.object_pose.pose.position.x, _x.action_result.result.object_pose.pose.position.y, _x.action_result.result.object_pose.pose.position.z, _x.action_result.result.object_pose.pose.orientation.x, _x.action_result.result.object_pose.pose.orientation.y, _x.action_result.result.object_pose.pose.orientation.z, _x.action_result.result.object_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.feedback_status
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = coordinator.msg.ManipTaskActionGoal()
      if self.action_result is None:
        self.action_result = coordinator.msg.ManipTaskActionResult()
      if self.action_feedback is None:
        self.action_feedback = coordinator.msg.ManipTaskActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.action_code, _x.action_goal.goal.object_code, _x.action_goal.goal.pickup_frame.header.seq, _x.action_goal.goal.pickup_frame.header.stamp.secs, _x.action_goal.goal.pickup_frame.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.pickup_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.pickup_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.pickup_frame.pose.position.x, _x.action_goal.goal.pickup_frame.pose.position.y, _x.action_goal.goal.pickup_frame.pose.position.z, _x.action_goal.goal.pickup_frame.pose.orientation.x, _x.action_goal.goal.pickup_frame.pose.orientation.y, _x.action_goal.goal.pickup_frame.pose.orientation.z, _x.action_goal.goal.pickup_frame.pose.orientation.w, _x.action_goal.goal.dropoff_frame.header.seq, _x.action_goal.goal.dropoff_frame.header.stamp.secs, _x.action_goal.goal.dropoff_frame.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.dropoff_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.dropoff_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.dropoff_frame.pose.position.x, _x.action_goal.goal.dropoff_frame.pose.position.y, _x.action_goal.goal.dropoff_frame.pose.position.z, _x.action_goal.goal.dropoff_frame.pose.orientation.x, _x.action_goal.goal.dropoff_frame.pose.orientation.y, _x.action_goal.goal.dropoff_frame.pose.orientation.z, _x.action_goal.goal.dropoff_frame.pose.orientation.w, _x.action_goal.goal.gripper_goal_frame.header.seq, _x.action_goal.goal.gripper_goal_frame.header.stamp.secs, _x.action_goal.goal.gripper_goal_frame.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.gripper_goal_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.gripper_goal_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.action_goal.goal.gripper_goal_frame.pose.position.x, _x.action_goal.goal.gripper_goal_frame.pose.position.y, _x.action_goal.goal.gripper_goal_frame.pose.position.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.x, _x.action_goal.goal.gripper_goal_frame.pose.orientation.y, _x.action_goal.goal.gripper_goal_frame.pose.orientation.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.w, _x.action_goal.goal.perception_source, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_7di3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_result.result.manip_return_code, _x.action_result.result.object_grabber_return_code, _x.action_result.result.des_gripper_pose.header.seq, _x.action_result.result.des_gripper_pose.header.stamp.secs, _x.action_result.result.des_gripper_pose.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.des_gripper_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.des_gripper_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.action_result.result.des_gripper_pose.pose.position.x, _x.action_result.result.des_gripper_pose.pose.position.y, _x.action_result.result.des_gripper_pose.pose.position.z, _x.action_result.result.des_gripper_pose.pose.orientation.x, _x.action_result.result.des_gripper_pose.pose.orientation.y, _x.action_result.result.des_gripper_pose.pose.orientation.z, _x.action_result.result.des_gripper_pose.pose.orientation.w, _x.action_result.result.object_finder_return_code, _x.action_result.result.object_pose.header.seq, _x.action_result.result.object_pose.header.stamp.secs, _x.action_result.result.object_pose.header.stamp.nsecs,) = _get_struct_7di3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.object_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.object_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.object_pose.pose.position.x, _x.action_result.result.object_pose.pose.position.y, _x.action_result.result.object_pose.pose.position.z, _x.action_result.result.object_pose.pose.orientation.x, _x.action_result.result.object_pose.pose.orientation.y, _x.action_result.result.object_pose.pose.orientation.z, _x.action_result.result.object_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (self.action_feedback.feedback.feedback_status,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.action_goal.goal.action_code, _x.action_goal.goal.object_code, _x.action_goal.goal.pickup_frame.header.seq, _x.action_goal.goal.pickup_frame.header.stamp.secs, _x.action_goal.goal.pickup_frame.header.stamp.nsecs))
      _x = self.action_goal.goal.pickup_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.pickup_frame.pose.position.x, _x.action_goal.goal.pickup_frame.pose.position.y, _x.action_goal.goal.pickup_frame.pose.position.z, _x.action_goal.goal.pickup_frame.pose.orientation.x, _x.action_goal.goal.pickup_frame.pose.orientation.y, _x.action_goal.goal.pickup_frame.pose.orientation.z, _x.action_goal.goal.pickup_frame.pose.orientation.w, _x.action_goal.goal.dropoff_frame.header.seq, _x.action_goal.goal.dropoff_frame.header.stamp.secs, _x.action_goal.goal.dropoff_frame.header.stamp.nsecs))
      _x = self.action_goal.goal.dropoff_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.dropoff_frame.pose.position.x, _x.action_goal.goal.dropoff_frame.pose.position.y, _x.action_goal.goal.dropoff_frame.pose.position.z, _x.action_goal.goal.dropoff_frame.pose.orientation.x, _x.action_goal.goal.dropoff_frame.pose.orientation.y, _x.action_goal.goal.dropoff_frame.pose.orientation.z, _x.action_goal.goal.dropoff_frame.pose.orientation.w, _x.action_goal.goal.gripper_goal_frame.header.seq, _x.action_goal.goal.gripper_goal_frame.header.stamp.secs, _x.action_goal.goal.gripper_goal_frame.header.stamp.nsecs))
      _x = self.action_goal.goal.gripper_goal_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di3I().pack(_x.action_goal.goal.gripper_goal_frame.pose.position.x, _x.action_goal.goal.gripper_goal_frame.pose.position.y, _x.action_goal.goal.gripper_goal_frame.pose.position.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.x, _x.action_goal.goal.gripper_goal_frame.pose.orientation.y, _x.action_goal.goal.gripper_goal_frame.pose.orientation.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.w, _x.action_goal.goal.perception_source, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i3I().pack(_x.action_result.result.manip_return_code, _x.action_result.result.object_grabber_return_code, _x.action_result.result.des_gripper_pose.header.seq, _x.action_result.result.des_gripper_pose.header.stamp.secs, _x.action_result.result.des_gripper_pose.header.stamp.nsecs))
      _x = self.action_result.result.des_gripper_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7di3I().pack(_x.action_result.result.des_gripper_pose.pose.position.x, _x.action_result.result.des_gripper_pose.pose.position.y, _x.action_result.result.des_gripper_pose.pose.position.z, _x.action_result.result.des_gripper_pose.pose.orientation.x, _x.action_result.result.des_gripper_pose.pose.orientation.y, _x.action_result.result.des_gripper_pose.pose.orientation.z, _x.action_result.result.des_gripper_pose.pose.orientation.w, _x.action_result.result.object_finder_return_code, _x.action_result.result.object_pose.header.seq, _x.action_result.result.object_pose.header.stamp.secs, _x.action_result.result.object_pose.header.stamp.nsecs))
      _x = self.action_result.result.object_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_result.result.object_pose.pose.position.x, _x.action_result.result.object_pose.pose.position.y, _x.action_result.result.object_pose.pose.position.z, _x.action_result.result.object_pose.pose.orientation.x, _x.action_result.result.object_pose.pose.orientation.y, _x.action_result.result.object_pose.pose.orientation.z, _x.action_result.result.object_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.feedback_status
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = coordinator.msg.ManipTaskActionGoal()
      if self.action_result is None:
        self.action_result = coordinator.msg.ManipTaskActionResult()
      if self.action_feedback is None:
        self.action_feedback = coordinator.msg.ManipTaskActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.action_code, _x.action_goal.goal.object_code, _x.action_goal.goal.pickup_frame.header.seq, _x.action_goal.goal.pickup_frame.header.stamp.secs, _x.action_goal.goal.pickup_frame.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.pickup_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.pickup_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.pickup_frame.pose.position.x, _x.action_goal.goal.pickup_frame.pose.position.y, _x.action_goal.goal.pickup_frame.pose.position.z, _x.action_goal.goal.pickup_frame.pose.orientation.x, _x.action_goal.goal.pickup_frame.pose.orientation.y, _x.action_goal.goal.pickup_frame.pose.orientation.z, _x.action_goal.goal.pickup_frame.pose.orientation.w, _x.action_goal.goal.dropoff_frame.header.seq, _x.action_goal.goal.dropoff_frame.header.stamp.secs, _x.action_goal.goal.dropoff_frame.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.dropoff_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.dropoff_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.dropoff_frame.pose.position.x, _x.action_goal.goal.dropoff_frame.pose.position.y, _x.action_goal.goal.dropoff_frame.pose.position.z, _x.action_goal.goal.dropoff_frame.pose.orientation.x, _x.action_goal.goal.dropoff_frame.pose.orientation.y, _x.action_goal.goal.dropoff_frame.pose.orientation.z, _x.action_goal.goal.dropoff_frame.pose.orientation.w, _x.action_goal.goal.gripper_goal_frame.header.seq, _x.action_goal.goal.gripper_goal_frame.header.stamp.secs, _x.action_goal.goal.gripper_goal_frame.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.gripper_goal_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.gripper_goal_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.action_goal.goal.gripper_goal_frame.pose.position.x, _x.action_goal.goal.gripper_goal_frame.pose.position.y, _x.action_goal.goal.gripper_goal_frame.pose.position.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.x, _x.action_goal.goal.gripper_goal_frame.pose.orientation.y, _x.action_goal.goal.gripper_goal_frame.pose.orientation.z, _x.action_goal.goal.gripper_goal_frame.pose.orientation.w, _x.action_goal.goal.perception_source, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_7di3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.action_result.result.manip_return_code, _x.action_result.result.object_grabber_return_code, _x.action_result.result.des_gripper_pose.header.seq, _x.action_result.result.des_gripper_pose.header.stamp.secs, _x.action_result.result.des_gripper_pose.header.stamp.nsecs,) = _get_struct_2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.des_gripper_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.des_gripper_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.action_result.result.des_gripper_pose.pose.position.x, _x.action_result.result.des_gripper_pose.pose.position.y, _x.action_result.result.des_gripper_pose.pose.position.z, _x.action_result.result.des_gripper_pose.pose.orientation.x, _x.action_result.result.des_gripper_pose.pose.orientation.y, _x.action_result.result.des_gripper_pose.pose.orientation.z, _x.action_result.result.des_gripper_pose.pose.orientation.w, _x.action_result.result.object_finder_return_code, _x.action_result.result.object_pose.header.seq, _x.action_result.result.object_pose.header.stamp.secs, _x.action_result.result.object_pose.header.stamp.nsecs,) = _get_struct_7di3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.object_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.object_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.object_pose.pose.position.x, _x.action_result.result.object_pose.pose.position.y, _x.action_result.result.object_pose.pose.position.z, _x.action_result.result.object_pose.pose.orientation.x, _x.action_result.result.object_pose.pose.orientation.y, _x.action_result.result.object_pose.pose.orientation.z, _x.action_result.result.object_pose.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (self.action_feedback.feedback.feedback_status,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i3I = None
def _get_struct_2i3I():
    global _struct_2i3I
    if _struct_2i3I is None:
        _struct_2i3I = struct.Struct("<2i3I")
    return _struct_2i3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_7di3I = None
def _get_struct_7di3I():
    global _struct_7di3I
    if _struct_7di3I is None:
        _struct_7di3I = struct.Struct("<7di3I")
    return _struct_7di3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

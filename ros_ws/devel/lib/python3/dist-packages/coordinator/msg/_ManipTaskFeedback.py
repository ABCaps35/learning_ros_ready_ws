# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from coordinator/ManipTaskFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ManipTaskFeedback(genpy.Message):
  _md5sum = "3f8a8da4157bed0205549b661c5eec04"
  _type = "coordinator/ManipTaskFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback codes:  perception_busy; planning_busy; pickup_busy; dropoff_busy
int32 RECEIVED_NEW_TASK = 0
int32 PERCEPTION_BUSY = 1
int32 PICKUP_PLANNING_BUSY = 2
int32 PICKUP_MOTION_BUSY = 3
int32 PICKUP_SUCCESSFUL = 103
int32 DROPOFF_PLANNING_BUSY = 4
int32 DROPOFF_MOTION_BUSY = 5
int32 NO_CURRENT_TASK = 6
int32 ABORTED = 7
int32 COMPLETED_MOVE = 8
int32 COMPLETED_DROPOFF = 9
int32 PREPOSE_MOVE_BUSY = 10
int32 MOVE_BUSY = 11


int32 feedback_status

"""
  # Pseudo-constants
  RECEIVED_NEW_TASK = 0
  PERCEPTION_BUSY = 1
  PICKUP_PLANNING_BUSY = 2
  PICKUP_MOTION_BUSY = 3
  PICKUP_SUCCESSFUL = 103
  DROPOFF_PLANNING_BUSY = 4
  DROPOFF_MOTION_BUSY = 5
  NO_CURRENT_TASK = 6
  ABORTED = 7
  COMPLETED_MOVE = 8
  COMPLETED_DROPOFF = 9
  PREPOSE_MOVE_BUSY = 10
  MOVE_BUSY = 11

  __slots__ = ['feedback_status']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feedback_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManipTaskFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.feedback_status is None:
        self.feedback_status = 0
    else:
      self.feedback_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.feedback_status
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.feedback_status,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.feedback_status
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.feedback_status,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

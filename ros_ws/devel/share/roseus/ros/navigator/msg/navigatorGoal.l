;; Auto-generated. Do not edit!


(when (boundp 'navigator::navigatorGoal)
  (if (not (find-package "NAVIGATOR"))
    (make-package "NAVIGATOR"))
  (shadow 'navigatorGoal (find-package "NAVIGATOR")))
(unless (find-package "NAVIGATOR::NAVIGATORGOAL")
  (make-package "NAVIGATOR::NAVIGATORGOAL"))

(in-package "ROS")
;;//! \htmlinclude navigatorGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(intern "*HOME*" (find-package "NAVIGATOR::NAVIGATORGOAL"))
(shadow '*HOME* (find-package "NAVIGATOR::NAVIGATORGOAL"))
(defconstant navigator::navigatorGoal::*HOME* 0)
(intern "*TABLE*" (find-package "NAVIGATOR::NAVIGATORGOAL"))
(shadow '*TABLE* (find-package "NAVIGATOR::NAVIGATORGOAL"))
(defconstant navigator::navigatorGoal::*TABLE* 1)
(intern "*COORDS*" (find-package "NAVIGATOR::NAVIGATORGOAL"))
(shadow '*COORDS* (find-package "NAVIGATOR::NAVIGATORGOAL"))
(defconstant navigator::navigatorGoal::*COORDS* 100)

(defun navigator::navigatorGoal-to-symbol (const)
  (cond
        ((= const 0) 'navigator::navigatorGoal::*HOME*)
        ((= const 1) 'navigator::navigatorGoal::*TABLE*)
        ((= const 100) 'navigator::navigatorGoal::*COORDS*)
        (t nil)))

(defclass navigator::navigatorGoal
  :super ros::object
  :slots (_location_code _desired_pose ))

(defmethod navigator::navigatorGoal
  (:init
   (&key
    ((:location_code __location_code) 0)
    ((:desired_pose __desired_pose) (instance geometry_msgs::PoseStamped :init))
    )
   (send-super :init)
   (setq _location_code (round __location_code))
   (setq _desired_pose __desired_pose)
   self)
  (:location_code
   (&optional __location_code)
   (if __location_code (setq _location_code __location_code)) _location_code)
  (:desired_pose
   (&rest __desired_pose)
   (if (keywordp (car __desired_pose))
       (send* _desired_pose __desired_pose)
     (progn
       (if __desired_pose (setq _desired_pose (car __desired_pose)))
       _desired_pose)))
  (:serialization-length
   ()
   (+
    ;; int32 _location_code
    4
    ;; geometry_msgs/PoseStamped _desired_pose
    (send _desired_pose :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _location_code
       (write-long _location_code s)
     ;; geometry_msgs/PoseStamped _desired_pose
       (send _desired_pose :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _location_code
     (setq _location_code (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; geometry_msgs/PoseStamped _desired_pose
     (send _desired_pose :deserialize buf ptr-) (incf ptr- (send _desired_pose :serialization-length))
   ;;
   self)
  )

(setf (get navigator::navigatorGoal :md5sum-) "b7b6535b4504c6aad6e6c2026e1040cf")
(setf (get navigator::navigatorGoal :datatype-) "navigator/navigatorGoal")
(setf (get navigator::navigatorGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#navigator action message
#pass in a destination code, and optional coordinates
#returns codes regarding outcome

int32 HOME = 0
int32 TABLE= 1
#add more locations here...

int32 COORDS=100

#goal:
int32 location_code
geometry_msgs/PoseStamped desired_pose

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :navigator/navigatorGoal "b7b6535b4504c6aad6e6c2026e1040cf")



// Auto-generated. Do not edit!

// (in-package cartesian_planner.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let cart_moveActionGoal = require('./cart_moveActionGoal.js');
let cart_moveActionResult = require('./cart_moveActionResult.js');
let cart_moveActionFeedback = require('./cart_moveActionFeedback.js');

//-----------------------------------------------------------

class cart_moveAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new cart_moveActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new cart_moveActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new cart_moveActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type cart_moveAction
    // Serialize message field [action_goal]
    bufferOffset = cart_moveActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = cart_moveActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = cart_moveActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type cart_moveAction
    let len;
    let data = new cart_moveAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = cart_moveActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = cart_moveActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = cart_moveActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += cart_moveActionGoal.getMessageSize(object.action_goal);
    length += cart_moveActionResult.getMessageSize(object.action_result);
    length += cart_moveActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cartesian_planner/cart_moveAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'bea51e920a4084b1b1e138193ef3a663';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    cart_moveActionGoal action_goal
    cart_moveActionResult action_result
    cart_moveActionFeedback action_feedback
    
    ================================================================================
    MSG: cartesian_planner/cart_moveActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    cart_moveGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: cartesian_planner/cart_moveGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #cartesian-move action interface
    #minimally, it may contain just a command code
    #more generally, it may contain desired tool-frame pose, as well
    # as gripper pose (gripper opening, or vacuum gripper on/off)
    # and an arrival time for the move
    # It is assumed that a move starts from the previous commanded pose, or from the current joint state
    
    #return codes provide status info, e.g. if a proposed move is reachable
    
    #define message constants:  
    uint8 ARM_TEST_MODE = 0
    
    #queries
    uint8 ARM_IS_SERVER_BUSY_QUERY = 1
    uint8 ARM_QUERY_IS_PATH_VALID = 2
    uint8 GET_TOOL_POSE = 5
    uint8 GET_Q_DATA = 7
    
    #requests for motion plans; 
    uint8 PLAN_PATH_CURRENT_TO_WAITING_POSE=20
    #uint8 PLAN_PATH_CURRENT_TO_PRE_POSE=20 #synonym
    uint8 PLAN_JSPACE_PATH_CURRENT_TO_CART_GRIPPER_POSE = 21 #plan a joint-space path from current arm pose to some IK soln of Cartesian goal
    
    uint8 PLAN_PATH_CURRENT_TO_GOAL_GRIPPER_POSE=22 #plan cartesian path from current arm pose to goal gripper pose
    uint8 PLAN_FINE_PATH_CURRENT_TO_GOAL_GRIPPER_POSE = 23 #plan path to specified gripper pose #as above, but hi-res
    uint8 PLAN_PATH_CURRENT_TO_GOAL_DP_XYZ = 24 #rectilinear translation w/ fixed orientation
    uint8 PLAN_JSPACE_PATH_CURRENT_TO_QGOAL = 25
     
    
    uint8 TIME_RESCALE_PLANNED_TRAJECTORY = 40 #can make arm go slower/faster with provided time-stretch factor
    uint8 REFINE_PLANNED_TRAJECTORY = 41 #if used approx IK soln, use this option to refine solns
    uint8 SET_ARRIVAL_TIME_PLANNED_TRAJECTORY = 42 #used to set desired arrival time; put arrival time value in goal time_scale_stretch_factor
    
    # request to preview plan:
    #uint8 DISPLAY_TRAJECTORY = 50
    
    #MOVE command!
    uint8 EXECUTE_PLANNED_PATH = 100
    
    #uint8 ARM_DESCEND_20CM=101
    #uint8 ARM_DEPART_20CM=102
    
    
    #goal:
    int32 command_code
    geometry_msgs/PoseStamped des_pose_gripper
    float64[] arm_dp #to command a 3-D vector displacement relative to current pose, fixed orientation
    float64[] q_goal
    float64 time_scale_stretch_factor
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: cartesian_planner/cart_moveActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    cart_moveResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: cartesian_planner/cart_moveResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    #  response codes...
    uint8 SUCCESS=0
    
    uint8 ARM_RECEIVED_AND_INITIATED_RQST=1
    uint8 ARM_REQUEST_REJECTED_ALREADY_BUSY=2
    uint8 ARM_SERVER_NOT_BUSY=3
    uint8 ARM_SERVER_IS_BUSY=4
    uint8 ARM_RECEIVED_AND_COMPLETED_RQST=5
    uint8 PATH_IS_VALID=6
    uint8 PATH_NOT_VALID=7
    
    uint8 COMMAND_CODE_NOT_RECOGNIZED=8
    uint8 ARM_STATUS_UNDEFINED=9
    uint8 NOT_FINISHED_BEFORE_TIMEOUT=10
    int32 return_code
    int32 err_code
    string err_msg
    float64 computed_arrival_time
    float64[] q_arm
    geometry_msgs/PoseStamped current_pose_gripper
    #geometry_msgs/PoseStamped current_pose_flange
    
    ================================================================================
    MSG: cartesian_planner/cart_moveActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    cart_moveFeedback feedback
    
    ================================================================================
    MSG: cartesian_planner/cart_moveFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback: optional; 
    int32 fdbk
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new cart_moveAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = cart_moveActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new cart_moveActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = cart_moveActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new cart_moveActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = cart_moveActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new cart_moveActionFeedback()
    }

    return resolved;
    }
};

module.exports = cart_moveAction;

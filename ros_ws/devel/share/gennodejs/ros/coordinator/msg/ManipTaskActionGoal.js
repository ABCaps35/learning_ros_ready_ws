// Auto-generated. Do not edit!

// (in-package coordinator.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ManipTaskGoal = require('./ManipTaskGoal.js');
let std_msgs = _finder('std_msgs');
let actionlib_msgs = _finder('actionlib_msgs');

//-----------------------------------------------------------

class ManipTaskActionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.header = null;
      this.goal_id = null;
      this.goal = null;
    }
    else {
      if (initObj.hasOwnProperty('header')) {
        this.header = initObj.header
      }
      else {
        this.header = new std_msgs.msg.Header();
      }
      if (initObj.hasOwnProperty('goal_id')) {
        this.goal_id = initObj.goal_id
      }
      else {
        this.goal_id = new actionlib_msgs.msg.GoalID();
      }
      if (initObj.hasOwnProperty('goal')) {
        this.goal = initObj.goal
      }
      else {
        this.goal = new ManipTaskGoal();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ManipTaskActionGoal
    // Serialize message field [header]
    bufferOffset = std_msgs.msg.Header.serialize(obj.header, buffer, bufferOffset);
    // Serialize message field [goal_id]
    bufferOffset = actionlib_msgs.msg.GoalID.serialize(obj.goal_id, buffer, bufferOffset);
    // Serialize message field [goal]
    bufferOffset = ManipTaskGoal.serialize(obj.goal, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ManipTaskActionGoal
    let len;
    let data = new ManipTaskActionGoal(null);
    // Deserialize message field [header]
    data.header = std_msgs.msg.Header.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal_id]
    data.goal_id = actionlib_msgs.msg.GoalID.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal]
    data.goal = ManipTaskGoal.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += std_msgs.msg.Header.getMessageSize(object.header);
    length += actionlib_msgs.msg.GoalID.getMessageSize(object.goal_id);
    length += ManipTaskGoal.getMessageSize(object.goal);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'coordinator/ManipTaskActionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '557039408527c4e70fb5d2f174d73b75';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    ManipTaskGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: coordinator/ManipTaskGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal: specify object code, perception type (incl blind), dropoff location, optional pickup location
    #task codes:
    int32 PCL_VISION = 1 # could have more camera sources to refer to
    int32 BLIND_MANIP = 2 #expect pose specified in pickup_location field
    
    #action codes:
    int32 GET_PICKUP_POSE = 1 #low level ops; maybe don't implement
    int32 WAIT_FOR_FINDER = 101
    
    int32 FIND_TABLE_SURFACE = 2 #do this once, and re-use result for multiple objects
    int32 WAIT_FIND_TABLE_SURFACE = 102
    
    int32 GRAB_OBJECT = 3 #assumes use of current pickup pose,
                          #whether provided for "blind" manip, or found
                          #from use of PCL_VISION
    int32 WAIT_FOR_GRAB_OBJECT = 103    
                     
    int32 DROPOFF_OBJECT = 4 #must provide dropoff_frame in goal msg
    int32 WAIT_FOR_DROPOFF_OBJECT = 104
    
    #int32 MANIP_OBJECT = 5 #macro: does perception, grab, and dropoff
                           #MUST provide dropoff frame, and means to
                           #get pickup_frame
    
    int32 STRADDLE_OBJECT = 8 #test mode--simply straddle object, but don't grasp it
    int32 WAIT_FOR_STRADDLE_OBJECT = 108
    
    int32 CART_MOVE_TO_GRIPPER_POSE = 9
    int32 WAIT_FOR_CART_MOVE = 109
                           
    int32 NO_CURRENT_TASK = 6
    int32 MOVE_TO_PRE_POSE = 7
    int32 WAIT_FOR_MOVE_TO_PREPOSE = 107
    int32 WAIT_FOR_MOVE = 107 #generic wait-for-move status
    
    int32 ABORT= 666
    
    #goal specification:
    int32 action_code #what action should be performed?
    int32 object_code #refer to a-priori known object types by object-ID codes
    geometry_msgs/PoseStamped pickup_frame #specify object coords for pickup 
    geometry_msgs/PoseStamped dropoff_frame #specify desired drop-off coords of object's frame
    geometry_msgs/PoseStamped gripper_goal_frame #a goal frame to move gripper
    int32 perception_source  #e.g. name a camera source
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ManipTaskActionGoal(null);
    if (msg.header !== undefined) {
      resolved.header = std_msgs.msg.Header.Resolve(msg.header)
    }
    else {
      resolved.header = new std_msgs.msg.Header()
    }

    if (msg.goal_id !== undefined) {
      resolved.goal_id = actionlib_msgs.msg.GoalID.Resolve(msg.goal_id)
    }
    else {
      resolved.goal_id = new actionlib_msgs.msg.GoalID()
    }

    if (msg.goal !== undefined) {
      resolved.goal = ManipTaskGoal.Resolve(msg.goal)
    }
    else {
      resolved.goal = new ManipTaskGoal()
    }

    return resolved;
    }
};

module.exports = ManipTaskActionGoal;

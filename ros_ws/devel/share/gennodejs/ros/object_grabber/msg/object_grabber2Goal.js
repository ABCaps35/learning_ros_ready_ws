// Auto-generated. Do not edit!

// (in-package object_grabber.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class object_grabber2Goal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_code = null;
      this.object_id = null;
      this.desired_frame = null;
    }
    else {
      if (initObj.hasOwnProperty('action_code')) {
        this.action_code = initObj.action_code
      }
      else {
        this.action_code = 0;
      }
      if (initObj.hasOwnProperty('object_id')) {
        this.object_id = initObj.object_id
      }
      else {
        this.object_id = 0;
      }
      if (initObj.hasOwnProperty('desired_frame')) {
        this.desired_frame = initObj.desired_frame
      }
      else {
        this.desired_frame = new geometry_msgs.msg.PoseStamped();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type object_grabber2Goal
    // Serialize message field [action_code]
    bufferOffset = _serializer.int32(obj.action_code, buffer, bufferOffset);
    // Serialize message field [object_id]
    bufferOffset = _serializer.int32(obj.object_id, buffer, bufferOffset);
    // Serialize message field [desired_frame]
    bufferOffset = geometry_msgs.msg.PoseStamped.serialize(obj.desired_frame, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type object_grabber2Goal
    let len;
    let data = new object_grabber2Goal(null);
    // Deserialize message field [action_code]
    data.action_code = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [object_id]
    data.object_id = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [desired_frame]
    data.desired_frame = geometry_msgs.msg.PoseStamped.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.PoseStamped.getMessageSize(object.desired_frame);
    return length + 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'object_grabber/object_grabber2Goal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '0ec453df5b9dae92255e6473b05fa39a';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #object_grabber action message
    #pass in an object code and the object's frame (w/rt named frame_id)
    #object_grabber will plan approach, grasp and lift of object
    #returns codes regarding outcome
    
    int32 UPRIGHT_CYLINDER = 1
    int32 GRAB_UPRIGHT_CYLINDER = 1 #synonym
    int32 TOY_BLOCK = 2
    int32 GRAB_TOY_BLOCK = 2 #synonym
    int32 GRAB_W_TOOL_Z_APPROACH = 2 #another synonym
    int32 PLACE_UPRIGHT_CYLINDER = 3 #new drop-off command
    int32 PLACE_TOY_BLOCK = 4 #drop-off toy block
    int32 DROPOFF_ALONG_TOOL_Z = 4 #synonym
    
    int32 MOVE_FLANGE_TO = 5 #specify flange pose to reach
    int32 FINE_MOVE_FLANGE_TO = 6 #precision move to specified flange pose
    int32 MOVE_TO_PRE_POSE = 7 # get hand out of way of camera
    int32 JSPACE_MOVE_FLANGE_TO = 8 # joint-space move to specified flange pose
    
    int32 CLOSE_GRIPPER = 100  #commands to open/close gripper; should specify test value
    int32 OPEN_GRIPPER = 101
    
    #moved these properties to object_manipulation_properties package/library
    #float64 TOY_BLOCK_APPROACH_DIST = 0.05
    #expect w/ gripper closed on toy block, finger separation should be more than this value:
    #float64 TOY_BLOCK_GRIPPER_CLOSE_TEST_VAL = 80.0
    
    
    #add more objects here...
    
    
    
    #goal:
    int32 action_code
    int32 object_id
    geometry_msgs/PoseStamped desired_frame  
    #float64 gripper_test_val
    
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new object_grabber2Goal(null);
    if (msg.action_code !== undefined) {
      resolved.action_code = msg.action_code;
    }
    else {
      resolved.action_code = 0
    }

    if (msg.object_id !== undefined) {
      resolved.object_id = msg.object_id;
    }
    else {
      resolved.object_id = 0
    }

    if (msg.desired_frame !== undefined) {
      resolved.desired_frame = geometry_msgs.msg.PoseStamped.Resolve(msg.desired_frame)
    }
    else {
      resolved.desired_frame = new geometry_msgs.msg.PoseStamped()
    }

    return resolved;
    }
};

// Constants for message
object_grabber2Goal.Constants = {
  UPRIGHT_CYLINDER: 1,
  GRAB_UPRIGHT_CYLINDER: 1,
  TOY_BLOCK: 2,
  GRAB_TOY_BLOCK: 2,
  GRAB_W_TOOL_Z_APPROACH: 2,
  PLACE_UPRIGHT_CYLINDER: 3,
  PLACE_TOY_BLOCK: 4,
  DROPOFF_ALONG_TOOL_Z: 4,
  MOVE_FLANGE_TO: 5,
  FINE_MOVE_FLANGE_TO: 6,
  MOVE_TO_PRE_POSE: 7,
  JSPACE_MOVE_FLANGE_TO: 8,
  CLOSE_GRIPPER: 100,
  OPEN_GRIPPER: 101,
}

module.exports = object_grabber2Goal;

// Auto-generated. Do not edit!

// (in-package object_grabber.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let object_grabber3ActionGoal = require('./object_grabber3ActionGoal.js');
let object_grabber3ActionResult = require('./object_grabber3ActionResult.js');
let object_grabber3ActionFeedback = require('./object_grabber3ActionFeedback.js');

//-----------------------------------------------------------

class object_grabber3Action {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new object_grabber3ActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new object_grabber3ActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new object_grabber3ActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type object_grabber3Action
    // Serialize message field [action_goal]
    bufferOffset = object_grabber3ActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = object_grabber3ActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = object_grabber3ActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type object_grabber3Action
    let len;
    let data = new object_grabber3Action(null);
    // Deserialize message field [action_goal]
    data.action_goal = object_grabber3ActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = object_grabber3ActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = object_grabber3ActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object_grabber3ActionGoal.getMessageSize(object.action_goal);
    length += object_grabber3ActionResult.getMessageSize(object.action_result);
    length += object_grabber3ActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'object_grabber/object_grabber3Action';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '4f43ea73e8c7ecffa27b8b01a6228297';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    object_grabber3ActionGoal action_goal
    object_grabber3ActionResult action_result
    object_grabber3ActionFeedback action_feedback
    
    ================================================================================
    MSG: object_grabber/object_grabber3ActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    object_grabber3Goal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: object_grabber/object_grabber3Goal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #object_grabber action message
    #pass in an object code and the object's frame (w/rt named frame_id)
    #object_grabber will plan approach, grasp and lift of object
    #returns codes regarding outcome
    
    #action codes:
    int32 TEST_CODE = 0   #a simple "ping" to action server
    int32 MOVE_TO_WAITING_POSE = 1 #move to a pose, defined on param server, that is convenient
                                   #e.g., prepared to approach a surface, but out of way of sensors
    int32 PLAN_MOVE_TO_GRASP_POSE  =2   #expects parameters of current_object_pose, object_ID, grasp_option, approach_option
                                   #must send separate "grasp" command to gripper
    int32 PLAN_MOVE_FINE_TO_GRASP_POSE  =3   #as above, but finer/slower approach motion
    int32 PLAN_MOVE_OBJECT_JSPACE =4    #move a grasped object to a destination pose using simple, joint-space move
                                   #expects params: des_object_pose, object_ID, grasp_option (need to know how object is grasped)
    int32 PLAN_MOVE_OBJECT_CSPACE = 5   #move a grasped object with Cartesian motion to a desired object pose
                                   #params:  des_object_pose, object_ID, grasp_option
    int32 PLAN_MOVE_FINE_OBJECT_CSPACE = 6 #as above, but w/ finer, slower motion
    
    int32 PLAN_WITHDRAW_FROM_OBJECT = 7 #with object grasp released, perform departure from object using specified depart strategy
                                   #params: object_ID, grasp_option, depart_option
    int32 PLAN_WITHDRAW_FINE_FROM_OBJECT = 8 #as above, but slower/more precise motion
    
    int32 PLAN_OBJECT_GRASP = 9  #combine multiple elements above to acquire an object
    
    int32 GRAB_OBJECT = 101 #plan and attempt to execute object acquisition, including grasp and lift
    int32 DROPOFF_OBJECT = 102 #plan and attempt to execute object placement and arm withdrawal
    
    int32 SET_SPEED_FACTOR = 10    #use arg speed_factor to change time scale of trajectory plan; larger than 1.0--> slower
    
    #manipulation strategy options:
    int32 DEFAULT_GRASP_STRATEGY = 0
    #has corresponding default approach and depart strategies
    
    int32 EXECUTE_PLANNED_MOVE = 100 #accept arm-motion plan and enable its execution
    
    #generalized gripper commands:
    int32 GRIPPER_PREPARE_GRASP_OBJECT = 20 #may require gripper to prepare for grasp approach, e.g. open fingers
    int32 GRIPPER_GRASP_OBJECT = 21        #command to perform appropriate action to grasp object, 
                                   #assumes gripper is in appropriate pose, prepared to grasp object
                                   #client does not need to know what type of gripper is used
    int32 GRIPPER_RELEASE_OBJECT = 22      #command to gripper to release a grasped object
                                   #params: object ID and grasp option used; 
    int32 GRIPPER_IS_OBJECT_GRASPED = 23   #a query; may require object_ID, grasp option used, and/or corresponding grasp test parameters; 
                                   #should return true/false
    
    #goal:
    int32 action_code
    int32 object_id
    int32 grasp_option
    int32 approach_strategy
    int32 lift_object_strategy
    int32 dropoff_strategy
    int32 dropoff_withdraw_strategy
    geometry_msgs/PoseStamped object_frame  #should be w/rt system_ref_frame, or have tf to this frame available
    float64 speed_factor #default to 1.0
    float64[] gripper_test_params
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: object_grabber/object_grabber3ActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    object_grabber3Result result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: object_grabber/object_grabber3Result
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    #  response codes...
    int32 SUCCESS=0
    int32 OBJECT_ACQUIRED=0
    int32 FAILED_CANNOT_REACH=1
    int32 FAILED_CANNOT_APPROACH=2
    int32 FAILED_CANNOT_REACH_GRASP_POSE=3
    int32 FAILED_CANNOT_REACH_DEPART_POSE=4
    int32 FAILED_OBJECT_NOT_IN_GRIPPER=5
    int32 FAILED_OBJECT_UNKNOWN=6
    int32 OBJECT_GRABBER_BUSY=7
    int32 OBJECT_GRABBER_CANCELLED=8
    int32 FAILED_CANNOT_REACH_DESIRED_POSE=9
    int32 FAILED_CANNOT_MOVE_CARTESIAN_FINE=13
    int32 FAILED_CANNOT_MOVE_TO_PRE_POSE=14
    int32 ACTION_CODE_UNKNOWN=15
    int32 GRIPPER_IS_OPEN=16
    int32 GRIPPER_IS_CLOSED=17
    int32 GRIPPER_FAILURE=18
    int32 PENDING=19
    int32 OBJECT_DROPPED_OFF = 20
    int32 NO_KNOWN_GRASP_OPTIONS_THIS_GRIPPER_AND_OBJECT = 21
    
    int32 return_code
    #geometry_msgs/PoseStamped des_flange_pose_stamped_wrt_torso
    float64 computed_move_time
    
    ================================================================================
    MSG: object_grabber/object_grabber3ActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    object_grabber3Feedback feedback
    
    ================================================================================
    MSG: object_grabber/object_grabber3Feedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback: optional; 
    int32 fdbk
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new object_grabber3Action(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = object_grabber3ActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new object_grabber3ActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = object_grabber3ActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new object_grabber3ActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = object_grabber3ActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new object_grabber3ActionFeedback()
    }

    return resolved;
    }
};

module.exports = object_grabber3Action;

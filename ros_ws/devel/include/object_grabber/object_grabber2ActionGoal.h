// Generated by gencpp from file object_grabber/object_grabber2ActionGoal.msg
// DO NOT EDIT!


#ifndef OBJECT_GRABBER_MESSAGE_OBJECT_GRABBER2ACTIONGOAL_H
#define OBJECT_GRABBER_MESSAGE_OBJECT_GRABBER2ACTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <object_grabber/object_grabber2Goal.h>

namespace object_grabber
{
template <class ContainerAllocator>
struct object_grabber2ActionGoal_
{
  typedef object_grabber2ActionGoal_<ContainerAllocator> Type;

  object_grabber2ActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  object_grabber2ActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::object_grabber::object_grabber2Goal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct object_grabber2ActionGoal_

typedef ::object_grabber::object_grabber2ActionGoal_<std::allocator<void> > object_grabber2ActionGoal;

typedef boost::shared_ptr< ::object_grabber::object_grabber2ActionGoal > object_grabber2ActionGoalPtr;
typedef boost::shared_ptr< ::object_grabber::object_grabber2ActionGoal const> object_grabber2ActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator1> & lhs, const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_id == rhs.goal_id &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator1> & lhs, const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_grabber

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f737f95f4ea69f3126d207ac9db0606b";
  }

  static const char* value(const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf737f95f4ea69f31ULL;
  static const uint64_t static_value2 = 0x26d207ac9db0606bULL;
};

template<class ContainerAllocator>
struct DataType< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_grabber/object_grabber2ActionGoal";
  }

  static const char* value(const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"object_grabber2Goal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: object_grabber/object_grabber2Goal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#object_grabber action message\n"
"#pass in an object code and the object's frame (w/rt named frame_id)\n"
"#object_grabber will plan approach, grasp and lift of object\n"
"#returns codes regarding outcome\n"
"\n"
"int32 UPRIGHT_CYLINDER = 1\n"
"int32 GRAB_UPRIGHT_CYLINDER = 1 #synonym\n"
"int32 TOY_BLOCK = 2\n"
"int32 GRAB_TOY_BLOCK = 2 #synonym\n"
"int32 GRAB_W_TOOL_Z_APPROACH = 2 #another synonym\n"
"int32 PLACE_UPRIGHT_CYLINDER = 3 #new drop-off command\n"
"int32 PLACE_TOY_BLOCK = 4 #drop-off toy block\n"
"int32 DROPOFF_ALONG_TOOL_Z = 4 #synonym\n"
"\n"
"int32 MOVE_FLANGE_TO = 5 #specify flange pose to reach\n"
"int32 FINE_MOVE_FLANGE_TO = 6 #precision move to specified flange pose\n"
"int32 MOVE_TO_PRE_POSE = 7 # get hand out of way of camera\n"
"int32 JSPACE_MOVE_FLANGE_TO = 8 # joint-space move to specified flange pose\n"
"\n"
"int32 CLOSE_GRIPPER = 100  #commands to open/close gripper; should specify test value\n"
"int32 OPEN_GRIPPER = 101\n"
"\n"
"#moved these properties to object_manipulation_properties package/library\n"
"#float64 TOY_BLOCK_APPROACH_DIST = 0.05\n"
"#expect w/ gripper closed on toy block, finger separation should be more than this value:\n"
"#float64 TOY_BLOCK_GRIPPER_CLOSE_TEST_VAL = 80.0\n"
"\n"
"\n"
"#add more objects here...\n"
"\n"
"\n"
"\n"
"#goal:\n"
"int32 action_code\n"
"int32 object_id\n"
"geometry_msgs/PoseStamped desired_frame  \n"
"#float64 gripper_test_val\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_grabber2ActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_grabber::object_grabber2ActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::object_grabber::object_grabber2Goal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_GRABBER_MESSAGE_OBJECT_GRABBER2ACTIONGOAL_H

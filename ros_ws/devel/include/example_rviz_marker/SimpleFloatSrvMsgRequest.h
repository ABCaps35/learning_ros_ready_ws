// Generated by gencpp from file example_rviz_marker/SimpleFloatSrvMsgRequest.msg
// DO NOT EDIT!


#ifndef EXAMPLE_RVIZ_MARKER_MESSAGE_SIMPLEFLOATSRVMSGREQUEST_H
#define EXAMPLE_RVIZ_MARKER_MESSAGE_SIMPLEFLOATSRVMSGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace example_rviz_marker
{
template <class ContainerAllocator>
struct SimpleFloatSrvMsgRequest_
{
  typedef SimpleFloatSrvMsgRequest_<ContainerAllocator> Type;

  SimpleFloatSrvMsgRequest_()
    : request_float32(0.0)  {
    }
  SimpleFloatSrvMsgRequest_(const ContainerAllocator& _alloc)
    : request_float32(0.0)  {
  (void)_alloc;
    }



   typedef float _request_float32_type;
  _request_float32_type request_float32;





  typedef boost::shared_ptr< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleFloatSrvMsgRequest_

typedef ::example_rviz_marker::SimpleFloatSrvMsgRequest_<std::allocator<void> > SimpleFloatSrvMsgRequest;

typedef boost::shared_ptr< ::example_rviz_marker::SimpleFloatSrvMsgRequest > SimpleFloatSrvMsgRequestPtr;
typedef boost::shared_ptr< ::example_rviz_marker::SimpleFloatSrvMsgRequest const> SimpleFloatSrvMsgRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator1> & lhs, const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request_float32 == rhs.request_float32;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator1> & lhs, const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace example_rviz_marker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e2741bfe371f985389b5947f47f030b";
  }

  static const char* value(const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e2741bfe371f985ULL;
  static const uint64_t static_value2 = 0x389b5947f47f030bULL;
};

template<class ContainerAllocator>
struct DataType< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "example_rviz_marker/SimpleFloatSrvMsgRequest";
  }

  static const char* value(const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 request_float32\n"
;
  }

  static const char* value(const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_float32);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleFloatSrvMsgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::example_rviz_marker::SimpleFloatSrvMsgRequest_<ContainerAllocator>& v)
  {
    s << indent << "request_float32: ";
    Printer<float>::stream(s, indent + "  ", v.request_float32);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXAMPLE_RVIZ_MARKER_MESSAGE_SIMPLEFLOATSRVMSGREQUEST_H

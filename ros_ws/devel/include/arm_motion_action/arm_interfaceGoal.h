// Generated by gencpp from file arm_motion_action/arm_interfaceGoal.msg
// DO NOT EDIT!


#ifndef ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEGOAL_H
#define ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace arm_motion_action
{
template <class ContainerAllocator>
struct arm_interfaceGoal_
{
  typedef arm_interfaceGoal_<ContainerAllocator> Type;

  arm_interfaceGoal_()
    : command_code(0)
    , des_pose_gripper()
    , arm_dp()
    , q_goal()
    , q_start()
    , nsteps(0)
    , arrival_time(0.0)
    , nseg(0)  {
    }
  arm_interfaceGoal_(const ContainerAllocator& _alloc)
    : command_code(0)
    , des_pose_gripper(_alloc)
    , arm_dp(_alloc)
    , q_goal(_alloc)
    , q_start(_alloc)
    , nsteps(0)
    , arrival_time(0.0)
    , nseg(0)  {
  (void)_alloc;
    }



   typedef int32_t _command_code_type;
  _command_code_type command_code;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _des_pose_gripper_type;
  _des_pose_gripper_type des_pose_gripper;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _arm_dp_type;
  _arm_dp_type arm_dp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_goal_type;
  _q_goal_type q_goal;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_start_type;
  _q_start_type q_start;

   typedef int32_t _nsteps_type;
  _nsteps_type nsteps;

   typedef double _arrival_time_type;
  _arrival_time_type arrival_time;

   typedef int32_t _nseg_type;
  _nseg_type nseg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ARM_TEST_MODE)
  #undef ARM_TEST_MODE
#endif
#if defined(_WIN32) && defined(ARM_IS_SERVER_BUSY_QUERY)
  #undef ARM_IS_SERVER_BUSY_QUERY
#endif
#if defined(_WIN32) && defined(ARM_QUERY_IS_PATH_VALID)
  #undef ARM_QUERY_IS_PATH_VALID
#endif
#if defined(_WIN32) && defined(GET_TOOL_POSE)
  #undef GET_TOOL_POSE
#endif
#if defined(_WIN32) && defined(GET_Q_DATA)
  #undef GET_Q_DATA
#endif
#if defined(_WIN32) && defined(PLAN_JSPACE_TRAJ_CURRENT_TO_WAITING_POSE)
  #undef PLAN_JSPACE_TRAJ_CURRENT_TO_WAITING_POSE
#endif
#if defined(_WIN32) && defined(PLAN_JSPACE_TRAJ_CURRENT_TO_QGOAL)
  #undef PLAN_JSPACE_TRAJ_CURRENT_TO_QGOAL
#endif
#if defined(_WIN32) && defined(PLAN_JSPACE_TRAJ_CURRENT_TO_CART_TOOL_POSE)
  #undef PLAN_JSPACE_TRAJ_CURRENT_TO_CART_TOOL_POSE
#endif
#if defined(_WIN32) && defined(PLAN_CARTESIAN_TRAJ_CURRENT_TO_DES_TOOL_POSE)
  #undef PLAN_CARTESIAN_TRAJ_CURRENT_TO_DES_TOOL_POSE
#endif
#if defined(_WIN32) && defined(PLAN_CARTESIAN_TRAJ_QSTART_TO_DES_TOOL_POSE)
  #undef PLAN_CARTESIAN_TRAJ_QSTART_TO_DES_TOOL_POSE
#endif
#if defined(_WIN32) && defined(PLAN_CARTESIAN_TRAJ_QPREV_TO_DES_TOOL_POSE)
  #undef PLAN_CARTESIAN_TRAJ_QPREV_TO_DES_TOOL_POSE
#endif
#if defined(_WIN32) && defined(CLEAR_MULTI_TRAJ_PLAN)
  #undef CLEAR_MULTI_TRAJ_PLAN
#endif
#if defined(_WIN32) && defined(APPEND_MULTI_TRAJ_CART_SEGMENT)
  #undef APPEND_MULTI_TRAJ_CART_SEGMENT
#endif
#if defined(_WIN32) && defined(APPEND_MULTI_TRAJ_JSPACE_SEGMENT)
  #undef APPEND_MULTI_TRAJ_JSPACE_SEGMENT
#endif
#if defined(_WIN32) && defined(REFINE_PLANNED_TRAJECTORY)
  #undef REFINE_PLANNED_TRAJECTORY
#endif
#if defined(_WIN32) && defined(EXECUTE_PLANNED_TRAJ)
  #undef EXECUTE_PLANNED_TRAJ
#endif
#if defined(_WIN32) && defined(EXECUTE_TRAJ_NSEG)
  #undef EXECUTE_TRAJ_NSEG
#endif

  enum {
    ARM_TEST_MODE = 0u,
    ARM_IS_SERVER_BUSY_QUERY = 1u,
    ARM_QUERY_IS_PATH_VALID = 2u,
    GET_TOOL_POSE = 5u,
    GET_Q_DATA = 7u,
    PLAN_JSPACE_TRAJ_CURRENT_TO_WAITING_POSE = 20u,
    PLAN_JSPACE_TRAJ_CURRENT_TO_QGOAL = 21u,
    PLAN_JSPACE_TRAJ_CURRENT_TO_CART_TOOL_POSE = 22u,
    PLAN_CARTESIAN_TRAJ_CURRENT_TO_DES_TOOL_POSE = 23u,
    PLAN_CARTESIAN_TRAJ_QSTART_TO_DES_TOOL_POSE = 24u,
    PLAN_CARTESIAN_TRAJ_QPREV_TO_DES_TOOL_POSE = 25u,
    CLEAR_MULTI_TRAJ_PLAN = 26u,
    APPEND_MULTI_TRAJ_CART_SEGMENT = 27u,
    APPEND_MULTI_TRAJ_JSPACE_SEGMENT = 28u,
    REFINE_PLANNED_TRAJECTORY = 41u,
    EXECUTE_PLANNED_TRAJ = 100u,
    EXECUTE_TRAJ_NSEG = 101u,
  };


  typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> const> ConstPtr;

}; // struct arm_interfaceGoal_

typedef ::arm_motion_action::arm_interfaceGoal_<std::allocator<void> > arm_interfaceGoal;

typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceGoal > arm_interfaceGoalPtr;
typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceGoal const> arm_interfaceGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator1> & lhs, const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator2> & rhs)
{
  return lhs.command_code == rhs.command_code &&
    lhs.des_pose_gripper == rhs.des_pose_gripper &&
    lhs.arm_dp == rhs.arm_dp &&
    lhs.q_goal == rhs.q_goal &&
    lhs.q_start == rhs.q_start &&
    lhs.nsteps == rhs.nsteps &&
    lhs.arrival_time == rhs.arrival_time &&
    lhs.nseg == rhs.nseg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator1> & lhs, const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_motion_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6f081fd5566806eb61e359be983b413";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6f081fd5566806eULL;
  static const uint64_t static_value2 = 0xb61e359be983b413ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_motion_action/arm_interfaceGoal";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#cartesian-move action interface\n"
"#minimally, it may contain just a command code\n"
"#more generally, it may contain desired tool-frame pose, as well\n"
"# as gripper pose (gripper opening, or vacuum gripper on/off)\n"
"# and an arrival time for the move\n"
"# It is assumed that a move starts from the previous commanded pose, or from the current joint state\n"
"\n"
"#return codes provide status info, e.g. if a proposed move is reachable\n"
"\n"
"#define message constants:  \n"
"uint8 ARM_TEST_MODE = 0\n"
"\n"
"#queries\n"
"uint8 ARM_IS_SERVER_BUSY_QUERY = 1\n"
"uint8 ARM_QUERY_IS_PATH_VALID = 2\n"
"uint8 GET_TOOL_POSE = 5\n"
"uint8 GET_Q_DATA = 7\n"
"\n"
"#requests for motion plans; \n"
"uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_WAITING_POSE=20\n"
"uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_QGOAL = 21\n"
"uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_CART_TOOL_POSE = 22 #plan a joint-space path from current arm pose to some IK soln of Cartesian goal\n"
"\n"
"uint8 PLAN_CARTESIAN_TRAJ_CURRENT_TO_DES_TOOL_POSE = 23\n"
"uint8 PLAN_CARTESIAN_TRAJ_QSTART_TO_DES_TOOL_POSE = 24\n"
"uint8 PLAN_CARTESIAN_TRAJ_QPREV_TO_DES_TOOL_POSE = 25\n"
"\n"
"uint8 CLEAR_MULTI_TRAJ_PLAN = 26\n"
"uint8 APPEND_MULTI_TRAJ_CART_SEGMENT = 27\n"
"uint8 APPEND_MULTI_TRAJ_JSPACE_SEGMENT = 28\n"
"\n"
"\n"
"uint8 REFINE_PLANNED_TRAJECTORY = 41 #if used approx IK soln, use this option to refine solns\n"
"\n"
"# request to preview plan:\n"
"#uint8 DISPLAY_TRAJECTORY = 50\n"
"\n"
"#MOVE command!\n"
"uint8 EXECUTE_PLANNED_TRAJ = 100\n"
"#specify a segment number to be executed from a multi-segment trajectory\n"
"uint8 EXECUTE_TRAJ_NSEG = 101\n"
"\n"
"#uint8 ARM_DESCEND_20CM=101\n"
"#uint8 ARM_DEPART_20CM=102\n"
"\n"
"\n"
"#goal:\n"
"int32 command_code\n"
"geometry_msgs/PoseStamped des_pose_gripper\n"
"float64[] arm_dp #to command a 3-D vector displacement relative to current pose, fixed orientation\n"
"float64[] q_goal\n"
"float64[] q_start\n"
"int32 nsteps\n"
"float64 arrival_time\n"
"int32 nseg #to choose one of NSEG segments in a multi-traj vector\n"
"#float64 time_scale_stretch_factor\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command_code);
      stream.next(m.des_pose_gripper);
      stream.next(m.arm_dp);
      stream.next(m.q_goal);
      stream.next(m.q_start);
      stream.next(m.nsteps);
      stream.next(m.arrival_time);
      stream.next(m.nseg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_interfaceGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator>& v)
  {
    s << indent << "command_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command_code);
    s << indent << "des_pose_gripper: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.des_pose_gripper);
    s << indent << "arm_dp[]" << std::endl;
    for (size_t i = 0; i < v.arm_dp.size(); ++i)
    {
      s << indent << "  arm_dp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.arm_dp[i]);
    }
    s << indent << "q_goal[]" << std::endl;
    for (size_t i = 0; i < v.q_goal.size(); ++i)
    {
      s << indent << "  q_goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_goal[i]);
    }
    s << indent << "q_start[]" << std::endl;
    for (size_t i = 0; i < v.q_start.size(); ++i)
    {
      s << indent << "  q_start[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_start[i]);
    }
    s << indent << "nsteps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nsteps);
    s << indent << "arrival_time: ";
    Printer<double>::stream(s, indent + "  ", v.arrival_time);
    s << indent << "nseg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nseg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEGOAL_H

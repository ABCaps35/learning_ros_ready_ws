// Generated by gencpp from file arm_motion_action/arm_interfaceAction.msg
// DO NOT EDIT!


#ifndef ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEACTION_H
#define ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arm_motion_action/arm_interfaceActionGoal.h>
#include <arm_motion_action/arm_interfaceActionResult.h>
#include <arm_motion_action/arm_interfaceActionFeedback.h>

namespace arm_motion_action
{
template <class ContainerAllocator>
struct arm_interfaceAction_
{
  typedef arm_interfaceAction_<ContainerAllocator> Type;

  arm_interfaceAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  arm_interfaceAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::arm_motion_action::arm_interfaceActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::arm_motion_action::arm_interfaceActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> const> ConstPtr;

}; // struct arm_interfaceAction_

typedef ::arm_motion_action::arm_interfaceAction_<std::allocator<void> > arm_interfaceAction;

typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceAction > arm_interfaceActionPtr;
typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceAction const> arm_interfaceActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator1> & lhs, const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator2> & rhs)
{
  return lhs.action_goal == rhs.action_goal &&
    lhs.action_result == rhs.action_result &&
    lhs.action_feedback == rhs.action_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator1> & lhs, const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_motion_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27485c91172002f41ce048b3f0b997ae";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27485c91172002f4ULL;
  static const uint64_t static_value2 = 0x1ce048b3f0b997aeULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_motion_action/arm_interfaceAction";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"arm_interfaceActionGoal action_goal\n"
"arm_interfaceActionResult action_result\n"
"arm_interfaceActionFeedback action_feedback\n"
"\n"
"================================================================================\n"
"MSG: arm_motion_action/arm_interfaceActionGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"arm_interfaceGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arm_motion_action/arm_interfaceGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#cartesian-move action interface\n"
"#minimally, it may contain just a command code\n"
"#more generally, it may contain desired tool-frame pose, as well\n"
"# as gripper pose (gripper opening, or vacuum gripper on/off)\n"
"# and an arrival time for the move\n"
"# It is assumed that a move starts from the previous commanded pose, or from the current joint state\n"
"\n"
"#return codes provide status info, e.g. if a proposed move is reachable\n"
"\n"
"#define message constants:  \n"
"uint8 ARM_TEST_MODE = 0\n"
"\n"
"#queries\n"
"uint8 ARM_IS_SERVER_BUSY_QUERY = 1\n"
"uint8 ARM_QUERY_IS_PATH_VALID = 2\n"
"uint8 GET_TOOL_POSE = 5\n"
"uint8 GET_Q_DATA = 7\n"
"\n"
"#requests for motion plans; \n"
"uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_WAITING_POSE=20\n"
"uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_QGOAL = 21\n"
"uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_CART_TOOL_POSE = 22 #plan a joint-space path from current arm pose to some IK soln of Cartesian goal\n"
"\n"
"uint8 PLAN_CARTESIAN_TRAJ_CURRENT_TO_DES_TOOL_POSE = 23\n"
"uint8 PLAN_CARTESIAN_TRAJ_QSTART_TO_DES_TOOL_POSE = 24\n"
"uint8 PLAN_CARTESIAN_TRAJ_QPREV_TO_DES_TOOL_POSE = 25\n"
"\n"
"uint8 CLEAR_MULTI_TRAJ_PLAN = 26\n"
"uint8 APPEND_MULTI_TRAJ_CART_SEGMENT = 27\n"
"uint8 APPEND_MULTI_TRAJ_JSPACE_SEGMENT = 28\n"
"\n"
"\n"
"uint8 REFINE_PLANNED_TRAJECTORY = 41 #if used approx IK soln, use this option to refine solns\n"
"\n"
"# request to preview plan:\n"
"#uint8 DISPLAY_TRAJECTORY = 50\n"
"\n"
"#MOVE command!\n"
"uint8 EXECUTE_PLANNED_TRAJ = 100\n"
"#specify a segment number to be executed from a multi-segment trajectory\n"
"uint8 EXECUTE_TRAJ_NSEG = 101\n"
"\n"
"#uint8 ARM_DESCEND_20CM=101\n"
"#uint8 ARM_DEPART_20CM=102\n"
"\n"
"\n"
"#goal:\n"
"int32 command_code\n"
"geometry_msgs/PoseStamped des_pose_gripper\n"
"float64[] arm_dp #to command a 3-D vector displacement relative to current pose, fixed orientation\n"
"float64[] q_goal\n"
"float64[] q_start\n"
"int32 nsteps\n"
"float64 arrival_time\n"
"int32 nseg #to choose one of NSEG segments in a multi-traj vector\n"
"#float64 time_scale_stretch_factor\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: arm_motion_action/arm_interfaceActionResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"arm_interfaceResult result\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalStatus\n"
"GoalID goal_id\n"
"uint8 status\n"
"uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
"uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
"uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
"                            #   and has since completed its execution (Terminal State)\n"
"uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
"uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
"                            #    to some failure (Terminal State)\n"
"uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
"                            #    because the goal was unattainable or invalid (Terminal State)\n"
"uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
"                            #    and has not yet completed execution\n"
"uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
"                            #    but the action server has not yet confirmed that the goal is canceled\n"
"uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
"                            #    and was successfully cancelled (Terminal State)\n"
"uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
"                            #    sent over the wire by an action server\n"
"\n"
"#Allow for the user to associate a string with GoalStatus for debugging\n"
"string text\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arm_motion_action/arm_interfaceResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"#  response codes...\n"
"uint8 SUCCESS=0\n"
"\n"
"uint8 ARM_RECEIVED_AND_INITIATED_RQST=1\n"
"uint8 ARM_REQUEST_REJECTED_ALREADY_BUSY=2\n"
"uint8 ARM_SERVER_NOT_BUSY=3\n"
"uint8 ARM_SERVER_IS_BUSY=4\n"
"uint8 ARM_RECEIVED_AND_COMPLETED_RQST=5\n"
"uint8 PATH_IS_VALID=6\n"
"uint8 PATH_NOT_VALID=7\n"
"\n"
"uint8 COMMAND_CODE_NOT_RECOGNIZED=8\n"
"uint8 ARM_STATUS_UNDEFINED=9\n"
"uint8 NOT_FINISHED_BEFORE_TIMEOUT=10\n"
"\n"
"\n"
"int32 return_code\n"
"int32 err_code\n"
"string err_msg\n"
"float64 computed_arrival_time\n"
"float64[] q_arm\n"
"geometry_msgs/PoseStamped current_pose_gripper\n"
"\n"
"================================================================================\n"
"MSG: arm_motion_action/arm_interfaceActionFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"arm_interfaceFeedback feedback\n"
"\n"
"================================================================================\n"
"MSG: arm_motion_action/arm_interfaceFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback: optional; \n"
"int32 fdbk\n"
"\n"
;
  }

  static const char* value(const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_interfaceAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_motion_action::arm_interfaceAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_motion_action::arm_interfaceAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::arm_motion_action::arm_interfaceActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::arm_motion_action::arm_interfaceActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEACTION_H

// Generated by gencpp from file coordinator/ManipTaskFeedback.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_MANIPTASKFEEDBACK_H
#define COORDINATOR_MESSAGE_MANIPTASKFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct ManipTaskFeedback_
{
  typedef ManipTaskFeedback_<ContainerAllocator> Type;

  ManipTaskFeedback_()
    : feedback_status(0)  {
    }
  ManipTaskFeedback_(const ContainerAllocator& _alloc)
    : feedback_status(0)  {
  (void)_alloc;
    }



   typedef int32_t _feedback_status_type;
  _feedback_status_type feedback_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RECEIVED_NEW_TASK)
  #undef RECEIVED_NEW_TASK
#endif
#if defined(_WIN32) && defined(PERCEPTION_BUSY)
  #undef PERCEPTION_BUSY
#endif
#if defined(_WIN32) && defined(PICKUP_PLANNING_BUSY)
  #undef PICKUP_PLANNING_BUSY
#endif
#if defined(_WIN32) && defined(PICKUP_MOTION_BUSY)
  #undef PICKUP_MOTION_BUSY
#endif
#if defined(_WIN32) && defined(PICKUP_SUCCESSFUL)
  #undef PICKUP_SUCCESSFUL
#endif
#if defined(_WIN32) && defined(DROPOFF_PLANNING_BUSY)
  #undef DROPOFF_PLANNING_BUSY
#endif
#if defined(_WIN32) && defined(DROPOFF_MOTION_BUSY)
  #undef DROPOFF_MOTION_BUSY
#endif
#if defined(_WIN32) && defined(NO_CURRENT_TASK)
  #undef NO_CURRENT_TASK
#endif
#if defined(_WIN32) && defined(ABORTED)
  #undef ABORTED
#endif
#if defined(_WIN32) && defined(COMPLETED_MOVE)
  #undef COMPLETED_MOVE
#endif
#if defined(_WIN32) && defined(COMPLETED_DROPOFF)
  #undef COMPLETED_DROPOFF
#endif
#if defined(_WIN32) && defined(PREPOSE_MOVE_BUSY)
  #undef PREPOSE_MOVE_BUSY
#endif
#if defined(_WIN32) && defined(MOVE_BUSY)
  #undef MOVE_BUSY
#endif

  enum {
    RECEIVED_NEW_TASK = 0,
    PERCEPTION_BUSY = 1,
    PICKUP_PLANNING_BUSY = 2,
    PICKUP_MOTION_BUSY = 3,
    PICKUP_SUCCESSFUL = 103,
    DROPOFF_PLANNING_BUSY = 4,
    DROPOFF_MOTION_BUSY = 5,
    NO_CURRENT_TASK = 6,
    ABORTED = 7,
    COMPLETED_MOVE = 8,
    COMPLETED_DROPOFF = 9,
    PREPOSE_MOVE_BUSY = 10,
    MOVE_BUSY = 11,
  };


  typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ManipTaskFeedback_

typedef ::coordinator::ManipTaskFeedback_<std::allocator<void> > ManipTaskFeedback;

typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback > ManipTaskFeedbackPtr;
typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback const> ManipTaskFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::ManipTaskFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coordinator::ManipTaskFeedback_<ContainerAllocator1> & lhs, const ::coordinator::ManipTaskFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.feedback_status == rhs.feedback_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coordinator::ManipTaskFeedback_<ContainerAllocator1> & lhs, const ::coordinator::ManipTaskFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coordinator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f8a8da4157bed0205549b661c5eec04";
  }

  static const char* value(const ::coordinator::ManipTaskFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f8a8da4157bed02ULL;
  static const uint64_t static_value2 = 0x05549b661c5eec04ULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/ManipTaskFeedback";
  }

  static const char* value(const ::coordinator::ManipTaskFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback codes:  perception_busy; planning_busy; pickup_busy; dropoff_busy\n"
"int32 RECEIVED_NEW_TASK = 0\n"
"int32 PERCEPTION_BUSY = 1\n"
"int32 PICKUP_PLANNING_BUSY = 2\n"
"int32 PICKUP_MOTION_BUSY = 3\n"
"int32 PICKUP_SUCCESSFUL = 103\n"
"int32 DROPOFF_PLANNING_BUSY = 4\n"
"int32 DROPOFF_MOTION_BUSY = 5\n"
"int32 NO_CURRENT_TASK = 6\n"
"int32 ABORTED = 7\n"
"int32 COMPLETED_MOVE = 8\n"
"int32 COMPLETED_DROPOFF = 9\n"
"int32 PREPOSE_MOVE_BUSY = 10\n"
"int32 MOVE_BUSY = 11\n"
"\n"
"\n"
"int32 feedback_status\n"
"\n"
;
  }

  static const char* value(const ::coordinator::ManipTaskFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipTaskFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::ManipTaskFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_MANIPTASKFEEDBACK_H

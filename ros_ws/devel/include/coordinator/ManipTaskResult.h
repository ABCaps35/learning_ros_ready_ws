// Generated by gencpp from file coordinator/ManipTaskResult.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_MANIPTASKRESULT_H
#define COORDINATOR_MESSAGE_MANIPTASKRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace coordinator
{
template <class ContainerAllocator>
struct ManipTaskResult_
{
  typedef ManipTaskResult_<ContainerAllocator> Type;

  ManipTaskResult_()
    : manip_return_code(0)
    , object_grabber_return_code(0)
    , des_gripper_pose()
    , object_finder_return_code(0)
    , object_pose()  {
    }
  ManipTaskResult_(const ContainerAllocator& _alloc)
    : manip_return_code(0)
    , object_grabber_return_code(0)
    , des_gripper_pose(_alloc)
    , object_finder_return_code(0)
    , object_pose(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _manip_return_code_type;
  _manip_return_code_type manip_return_code;

   typedef int32_t _object_grabber_return_code_type;
  _object_grabber_return_code_type object_grabber_return_code;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _des_gripper_pose_type;
  _des_gripper_pose_type des_gripper_pose;

   typedef int32_t _object_finder_return_code_type;
  _object_finder_return_code_type object_finder_return_code;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _object_pose_type;
  _object_pose_type object_pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MANIP_SUCCESS)
  #undef MANIP_SUCCESS
#endif
#if defined(_WIN32) && defined(FAILED_PERCEPTION)
  #undef FAILED_PERCEPTION
#endif
#if defined(_WIN32) && defined(FAILED_PICKUP_PLAN)
  #undef FAILED_PICKUP_PLAN
#endif
#if defined(_WIN32) && defined(FAILED_DROPOFF_PLAN)
  #undef FAILED_DROPOFF_PLAN
#endif
#if defined(_WIN32) && defined(FAILED_PICKUP)
  #undef FAILED_PICKUP
#endif
#if defined(_WIN32) && defined(FAILED_DROPOFF)
  #undef FAILED_DROPOFF
#endif
#if defined(_WIN32) && defined(DROPPED_OBJECT)
  #undef DROPPED_OBJECT
#endif
#if defined(_WIN32) && defined(ABORTED)
  #undef ABORTED
#endif
#if defined(_WIN32) && defined(PENDING)
  #undef PENDING
#endif
#if defined(_WIN32) && defined(FAILED_MOVE)
  #undef FAILED_MOVE
#endif

  enum {
    MANIP_SUCCESS = 0,
    FAILED_PERCEPTION = 1,
    FAILED_PICKUP_PLAN = 2,
    FAILED_DROPOFF_PLAN = 3,
    FAILED_PICKUP = 4,
    FAILED_DROPOFF = 5,
    DROPPED_OBJECT = 6,
    ABORTED = 7,
    PENDING = 8,
    FAILED_MOVE = 9,
  };


  typedef boost::shared_ptr< ::coordinator::ManipTaskResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::ManipTaskResult_<ContainerAllocator> const> ConstPtr;

}; // struct ManipTaskResult_

typedef ::coordinator::ManipTaskResult_<std::allocator<void> > ManipTaskResult;

typedef boost::shared_ptr< ::coordinator::ManipTaskResult > ManipTaskResultPtr;
typedef boost::shared_ptr< ::coordinator::ManipTaskResult const> ManipTaskResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::ManipTaskResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::ManipTaskResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coordinator::ManipTaskResult_<ContainerAllocator1> & lhs, const ::coordinator::ManipTaskResult_<ContainerAllocator2> & rhs)
{
  return lhs.manip_return_code == rhs.manip_return_code &&
    lhs.object_grabber_return_code == rhs.object_grabber_return_code &&
    lhs.des_gripper_pose == rhs.des_gripper_pose &&
    lhs.object_finder_return_code == rhs.object_finder_return_code &&
    lhs.object_pose == rhs.object_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coordinator::ManipTaskResult_<ContainerAllocator1> & lhs, const ::coordinator::ManipTaskResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coordinator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::ManipTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "770935eb962728db325c53aee715c9b3";
  }

  static const char* value(const ::coordinator::ManipTaskResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x770935eb962728dbULL;
  static const uint64_t static_value2 = 0x325c53aee715c9b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::ManipTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/ManipTaskResult";
  }

  static const char* value(const ::coordinator::ManipTaskResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::ManipTaskResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#return codes:\n"
"int32 MANIP_SUCCESS = 0\n"
"int32 FAILED_PERCEPTION = 1\n"
"int32 FAILED_PICKUP_PLAN =2 \n"
"int32 FAILED_DROPOFF_PLAN=3\n"
"int32 FAILED_PICKUP=4\n"
"int32 FAILED_DROPOFF=5\n"
"int32 DROPPED_OBJECT = 6\n"
"int32 ABORTED = 7\n"
"int32 PENDING = 8\n"
"int32 FAILED_MOVE = 9\n"
"\n"
"int32 manip_return_code\n"
"int32 object_grabber_return_code\n"
"geometry_msgs/PoseStamped des_gripper_pose\n"
"int32 object_finder_return_code\n"
"geometry_msgs/PoseStamped object_pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::coordinator::ManipTaskResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::ManipTaskResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.manip_return_code);
      stream.next(m.object_grabber_return_code);
      stream.next(m.des_gripper_pose);
      stream.next(m.object_finder_return_code);
      stream.next(m.object_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipTaskResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::ManipTaskResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::ManipTaskResult_<ContainerAllocator>& v)
  {
    s << indent << "manip_return_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.manip_return_code);
    s << indent << "object_grabber_return_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_grabber_return_code);
    s << indent << "des_gripper_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.des_gripper_pose);
    s << indent << "object_finder_return_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_finder_return_code);
    s << indent << "object_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.object_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_MANIPTASKRESULT_H

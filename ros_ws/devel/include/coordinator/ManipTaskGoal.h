// Generated by gencpp from file coordinator/ManipTaskGoal.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_MANIPTASKGOAL_H
#define COORDINATOR_MESSAGE_MANIPTASKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace coordinator
{
template <class ContainerAllocator>
struct ManipTaskGoal_
{
  typedef ManipTaskGoal_<ContainerAllocator> Type;

  ManipTaskGoal_()
    : action_code(0)
    , object_code(0)
    , pickup_frame()
    , dropoff_frame()
    , gripper_goal_frame()
    , perception_source(0)  {
    }
  ManipTaskGoal_(const ContainerAllocator& _alloc)
    : action_code(0)
    , object_code(0)
    , pickup_frame(_alloc)
    , dropoff_frame(_alloc)
    , gripper_goal_frame(_alloc)
    , perception_source(0)  {
  (void)_alloc;
    }



   typedef int32_t _action_code_type;
  _action_code_type action_code;

   typedef int32_t _object_code_type;
  _object_code_type object_code;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pickup_frame_type;
  _pickup_frame_type pickup_frame;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _dropoff_frame_type;
  _dropoff_frame_type dropoff_frame;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _gripper_goal_frame_type;
  _gripper_goal_frame_type gripper_goal_frame;

   typedef int32_t _perception_source_type;
  _perception_source_type perception_source;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PCL_VISION)
  #undef PCL_VISION
#endif
#if defined(_WIN32) && defined(BLIND_MANIP)
  #undef BLIND_MANIP
#endif
#if defined(_WIN32) && defined(GET_PICKUP_POSE)
  #undef GET_PICKUP_POSE
#endif
#if defined(_WIN32) && defined(WAIT_FOR_FINDER)
  #undef WAIT_FOR_FINDER
#endif
#if defined(_WIN32) && defined(FIND_TABLE_SURFACE)
  #undef FIND_TABLE_SURFACE
#endif
#if defined(_WIN32) && defined(WAIT_FIND_TABLE_SURFACE)
  #undef WAIT_FIND_TABLE_SURFACE
#endif
#if defined(_WIN32) && defined(GRAB_OBJECT)
  #undef GRAB_OBJECT
#endif
#if defined(_WIN32) && defined(WAIT_FOR_GRAB_OBJECT)
  #undef WAIT_FOR_GRAB_OBJECT
#endif
#if defined(_WIN32) && defined(DROPOFF_OBJECT)
  #undef DROPOFF_OBJECT
#endif
#if defined(_WIN32) && defined(WAIT_FOR_DROPOFF_OBJECT)
  #undef WAIT_FOR_DROPOFF_OBJECT
#endif
#if defined(_WIN32) && defined(STRADDLE_OBJECT)
  #undef STRADDLE_OBJECT
#endif
#if defined(_WIN32) && defined(WAIT_FOR_STRADDLE_OBJECT)
  #undef WAIT_FOR_STRADDLE_OBJECT
#endif
#if defined(_WIN32) && defined(CART_MOVE_TO_GRIPPER_POSE)
  #undef CART_MOVE_TO_GRIPPER_POSE
#endif
#if defined(_WIN32) && defined(WAIT_FOR_CART_MOVE)
  #undef WAIT_FOR_CART_MOVE
#endif
#if defined(_WIN32) && defined(NO_CURRENT_TASK)
  #undef NO_CURRENT_TASK
#endif
#if defined(_WIN32) && defined(MOVE_TO_PRE_POSE)
  #undef MOVE_TO_PRE_POSE
#endif
#if defined(_WIN32) && defined(WAIT_FOR_MOVE_TO_PREPOSE)
  #undef WAIT_FOR_MOVE_TO_PREPOSE
#endif
#if defined(_WIN32) && defined(WAIT_FOR_MOVE)
  #undef WAIT_FOR_MOVE
#endif
#if defined(_WIN32) && defined(ABORT)
  #undef ABORT
#endif

  enum {
    PCL_VISION = 1,
    BLIND_MANIP = 2,
    GET_PICKUP_POSE = 1,
    WAIT_FOR_FINDER = 101,
    FIND_TABLE_SURFACE = 2,
    WAIT_FIND_TABLE_SURFACE = 102,
    GRAB_OBJECT = 3,
    WAIT_FOR_GRAB_OBJECT = 103,
    DROPOFF_OBJECT = 4,
    WAIT_FOR_DROPOFF_OBJECT = 104,
    STRADDLE_OBJECT = 8,
    WAIT_FOR_STRADDLE_OBJECT = 108,
    CART_MOVE_TO_GRIPPER_POSE = 9,
    WAIT_FOR_CART_MOVE = 109,
    NO_CURRENT_TASK = 6,
    MOVE_TO_PRE_POSE = 7,
    WAIT_FOR_MOVE_TO_PREPOSE = 107,
    WAIT_FOR_MOVE = 107,
    ABORT = 666,
  };


  typedef boost::shared_ptr< ::coordinator::ManipTaskGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::ManipTaskGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ManipTaskGoal_

typedef ::coordinator::ManipTaskGoal_<std::allocator<void> > ManipTaskGoal;

typedef boost::shared_ptr< ::coordinator::ManipTaskGoal > ManipTaskGoalPtr;
typedef boost::shared_ptr< ::coordinator::ManipTaskGoal const> ManipTaskGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::ManipTaskGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::ManipTaskGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coordinator::ManipTaskGoal_<ContainerAllocator1> & lhs, const ::coordinator::ManipTaskGoal_<ContainerAllocator2> & rhs)
{
  return lhs.action_code == rhs.action_code &&
    lhs.object_code == rhs.object_code &&
    lhs.pickup_frame == rhs.pickup_frame &&
    lhs.dropoff_frame == rhs.dropoff_frame &&
    lhs.gripper_goal_frame == rhs.gripper_goal_frame &&
    lhs.perception_source == rhs.perception_source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coordinator::ManipTaskGoal_<ContainerAllocator1> & lhs, const ::coordinator::ManipTaskGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coordinator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "439e760055837a8000a9a7865d0345ab";
  }

  static const char* value(const ::coordinator::ManipTaskGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x439e760055837a80ULL;
  static const uint64_t static_value2 = 0x00a9a7865d0345abULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/ManipTaskGoal";
  }

  static const char* value(const ::coordinator::ManipTaskGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal: specify object code, perception type (incl blind), dropoff location, optional pickup location\n"
"#task codes:\n"
"int32 PCL_VISION = 1 # could have more camera sources to refer to\n"
"int32 BLIND_MANIP = 2 #expect pose specified in pickup_location field\n"
"\n"
"#action codes:\n"
"int32 GET_PICKUP_POSE = 1 #low level ops; maybe don't implement\n"
"int32 WAIT_FOR_FINDER = 101\n"
"\n"
"int32 FIND_TABLE_SURFACE = 2 #do this once, and re-use result for multiple objects\n"
"int32 WAIT_FIND_TABLE_SURFACE = 102\n"
"\n"
"int32 GRAB_OBJECT = 3 #assumes use of current pickup pose,\n"
"                      #whether provided for \"blind\" manip, or found\n"
"                      #from use of PCL_VISION\n"
"int32 WAIT_FOR_GRAB_OBJECT = 103    \n"
"                 \n"
"int32 DROPOFF_OBJECT = 4 #must provide dropoff_frame in goal msg\n"
"int32 WAIT_FOR_DROPOFF_OBJECT = 104\n"
"\n"
"#int32 MANIP_OBJECT = 5 #macro: does perception, grab, and dropoff\n"
"                       #MUST provide dropoff frame, and means to\n"
"                       #get pickup_frame\n"
"\n"
"int32 STRADDLE_OBJECT = 8 #test mode--simply straddle object, but don't grasp it\n"
"int32 WAIT_FOR_STRADDLE_OBJECT = 108\n"
"\n"
"int32 CART_MOVE_TO_GRIPPER_POSE = 9\n"
"int32 WAIT_FOR_CART_MOVE = 109\n"
"                       \n"
"int32 NO_CURRENT_TASK = 6\n"
"int32 MOVE_TO_PRE_POSE = 7\n"
"int32 WAIT_FOR_MOVE_TO_PREPOSE = 107\n"
"int32 WAIT_FOR_MOVE = 107 #generic wait-for-move status\n"
"\n"
"int32 ABORT= 666\n"
"\n"
"#goal specification:\n"
"int32 action_code #what action should be performed?\n"
"int32 object_code #refer to a-priori known object types by object-ID codes\n"
"geometry_msgs/PoseStamped pickup_frame #specify object coords for pickup \n"
"geometry_msgs/PoseStamped dropoff_frame #specify desired drop-off coords of object's frame\n"
"geometry_msgs/PoseStamped gripper_goal_frame #a goal frame to move gripper\n"
"int32 perception_source  #e.g. name a camera source\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::coordinator::ManipTaskGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_code);
      stream.next(m.object_code);
      stream.next(m.pickup_frame);
      stream.next(m.dropoff_frame);
      stream.next(m.gripper_goal_frame);
      stream.next(m.perception_source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipTaskGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::ManipTaskGoal_<ContainerAllocator>& v)
  {
    s << indent << "action_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_code);
    s << indent << "object_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_code);
    s << indent << "pickup_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pickup_frame);
    s << indent << "dropoff_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.dropoff_frame);
    s << indent << "gripper_goal_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.gripper_goal_frame);
    s << indent << "perception_source: ";
    Printer<int32_t>::stream(s, indent + "  ", v.perception_source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_MANIPTASKGOAL_H

// Generated by gencpp from file coordinator/OpenLoopNavSvcRequest.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_OPENLOOPNAVSVCREQUEST_H
#define COORDINATOR_MESSAGE_OPENLOOPNAVSVCREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct OpenLoopNavSvcRequest_
{
  typedef OpenLoopNavSvcRequest_<ContainerAllocator> Type;

  OpenLoopNavSvcRequest_()
    : move_distance(0.0)  {
    }
  OpenLoopNavSvcRequest_(const ContainerAllocator& _alloc)
    : move_distance(0.0)  {
  (void)_alloc;
    }



   typedef double _move_distance_type;
  _move_distance_type move_distance;





  typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OpenLoopNavSvcRequest_

typedef ::coordinator::OpenLoopNavSvcRequest_<std::allocator<void> > OpenLoopNavSvcRequest;

typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest > OpenLoopNavSvcRequestPtr;
typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest const> OpenLoopNavSvcRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator1> & lhs, const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator2> & rhs)
{
  return lhs.move_distance == rhs.move_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator1> & lhs, const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coordinator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd1ab1819c86c0434d8f0532349189fe";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd1ab1819c86c043ULL;
  static const uint64_t static_value2 = 0x4d8f0532349189feULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/OpenLoopNavSvcRequest";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 move_distance\n"
;
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenLoopNavSvcRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>& v)
  {
    s << indent << "move_distance: ";
    Printer<double>::stream(s, indent + "  ", v.move_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_OPENLOOPNAVSVCREQUEST_H

// Generated by gencpp from file coordinator/OpenLoopNavSvcResponse.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_OPENLOOPNAVSVCRESPONSE_H
#define COORDINATOR_MESSAGE_OPENLOOPNAVSVCRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct OpenLoopNavSvcResponse_
{
  typedef OpenLoopNavSvcResponse_<ContainerAllocator> Type;

  OpenLoopNavSvcResponse_()
    : rtn_code(0)  {
    }
  OpenLoopNavSvcResponse_(const ContainerAllocator& _alloc)
    : rtn_code(0)  {
  (void)_alloc;
    }



   typedef int32_t _rtn_code_type;
  _rtn_code_type rtn_code;





  typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OpenLoopNavSvcResponse_

typedef ::coordinator::OpenLoopNavSvcResponse_<std::allocator<void> > OpenLoopNavSvcResponse;

typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcResponse > OpenLoopNavSvcResponsePtr;
typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcResponse const> OpenLoopNavSvcResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator1> & lhs, const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator2> & rhs)
{
  return lhs.rtn_code == rhs.rtn_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator1> & lhs, const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coordinator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42f2b282ebf8297c4a5d72fb856688c7";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42f2b282ebf8297cULL;
  static const uint64_t static_value2 = 0x4a5d72fb856688c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/OpenLoopNavSvcResponse";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 rtn_code\n"
"\n"
;
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rtn_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenLoopNavSvcResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::OpenLoopNavSvcResponse_<ContainerAllocator>& v)
  {
    s << indent << "rtn_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rtn_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_OPENLOOPNAVSVCRESPONSE_H

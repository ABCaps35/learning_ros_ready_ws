// Generated by gencpp from file coordinator/CoordinatorSrvRequest.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_COORDINATORSRVREQUEST_H
#define COORDINATOR_MESSAGE_COORDINATORSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct CoordinatorSrvRequest_
{
  typedef CoordinatorSrvRequest_<ContainerAllocator> Type;

  CoordinatorSrvRequest_()
    : action_code(0)  {
    }
  CoordinatorSrvRequest_(const ContainerAllocator& _alloc)
    : action_code(0)  {
  (void)_alloc;
    }



   typedef int32_t _action_code_type;
  _action_code_type action_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FIND_BLOCK)
  #undef FIND_BLOCK
#endif
#if defined(_WIN32) && defined(GRAB_BLOCK)
  #undef GRAB_BLOCK
#endif
#if defined(_WIN32) && defined(NAVIGATE)
  #undef NAVIGATE
#endif
#if defined(_WIN32) && defined(DO_NOTHING)
  #undef DO_NOTHING
#endif
#if defined(_WIN32) && defined(ABORT)
  #undef ABORT
#endif
#if defined(_WIN32) && defined(BUSY_FINDER)
  #undef BUSY_FINDER
#endif
#if defined(_WIN32) && defined(BUSY_GRABBER)
  #undef BUSY_GRABBER
#endif

  enum {
    FIND_BLOCK = 100,
    GRAB_BLOCK = 101,
    NAVIGATE = 102,
    DO_NOTHING = 0,
    ABORT = 1,
    BUSY_FINDER = 200,
    BUSY_GRABBER = 201,
  };


  typedef boost::shared_ptr< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CoordinatorSrvRequest_

typedef ::coordinator::CoordinatorSrvRequest_<std::allocator<void> > CoordinatorSrvRequest;

typedef boost::shared_ptr< ::coordinator::CoordinatorSrvRequest > CoordinatorSrvRequestPtr;
typedef boost::shared_ptr< ::coordinator::CoordinatorSrvRequest const> CoordinatorSrvRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator1> & lhs, const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action_code == rhs.action_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator1> & lhs, const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coordinator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ced60cc6c79d8c4f46db9f903e49cbf";
  }

  static const char* value(const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ced60cc6c79d8c4ULL;
  static const uint64_t static_value2 = 0xf46db9f903e49cbfULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/CoordinatorSrvRequest";
  }

  static const char* value(const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 FIND_BLOCK = 100\n"
"int32 GRAB_BLOCK = 101\n"
"int32 NAVIGATE = 102\n"
"int32 DO_NOTHING = 0\n"
"int32 ABORT = 1\n"
"int32 BUSY_FINDER = 200\n"
"int32 BUSY_GRABBER = 201\n"
"\n"
"int32 action_code\n"
;
  }

  static const char* value(const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CoordinatorSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::CoordinatorSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::CoordinatorSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "action_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_COORDINATORSRVREQUEST_H

// Generated by gencpp from file cartesian_planner/cart_moveActionGoal.msg
// DO NOT EDIT!


#ifndef CARTESIAN_PLANNER_MESSAGE_CART_MOVEACTIONGOAL_H
#define CARTESIAN_PLANNER_MESSAGE_CART_MOVEACTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <cartesian_planner/cart_moveGoal.h>

namespace cartesian_planner
{
template <class ContainerAllocator>
struct cart_moveActionGoal_
{
  typedef cart_moveActionGoal_<ContainerAllocator> Type;

  cart_moveActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  cart_moveActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::cartesian_planner::cart_moveGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct cart_moveActionGoal_

typedef ::cartesian_planner::cart_moveActionGoal_<std::allocator<void> > cart_moveActionGoal;

typedef boost::shared_ptr< ::cartesian_planner::cart_moveActionGoal > cart_moveActionGoalPtr;
typedef boost::shared_ptr< ::cartesian_planner::cart_moveActionGoal const> cart_moveActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator1> & lhs, const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_id == rhs.goal_id &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator1> & lhs, const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "304609fd1418128ba7bd3a458df99bf3";
  }

  static const char* value(const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x304609fd1418128bULL;
  static const uint64_t static_value2 = 0xa7bd3a458df99bf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_planner/cart_moveActionGoal";
  }

  static const char* value(const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"cart_moveGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cartesian_planner/cart_moveGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#cartesian-move action interface\n"
"#minimally, it may contain just a command code\n"
"#more generally, it may contain desired tool-frame pose, as well\n"
"# as gripper pose (gripper opening, or vacuum gripper on/off)\n"
"# and an arrival time for the move\n"
"# It is assumed that a move starts from the previous commanded pose, or from the current joint state\n"
"\n"
"#return codes provide status info, e.g. if a proposed move is reachable\n"
"\n"
"#define message constants:  \n"
"uint8 ARM_TEST_MODE = 0\n"
"\n"
"#queries\n"
"uint8 ARM_IS_SERVER_BUSY_QUERY = 1\n"
"uint8 ARM_QUERY_IS_PATH_VALID = 2\n"
"uint8 GET_TOOL_POSE = 5\n"
"uint8 GET_Q_DATA = 7\n"
"\n"
"#requests for motion plans; \n"
"uint8 PLAN_PATH_CURRENT_TO_WAITING_POSE=20\n"
"#uint8 PLAN_PATH_CURRENT_TO_PRE_POSE=20 #synonym\n"
"uint8 PLAN_JSPACE_PATH_CURRENT_TO_CART_GRIPPER_POSE = 21 #plan a joint-space path from current arm pose to some IK soln of Cartesian goal\n"
"\n"
"uint8 PLAN_PATH_CURRENT_TO_GOAL_GRIPPER_POSE=22 #plan cartesian path from current arm pose to goal gripper pose\n"
"uint8 PLAN_FINE_PATH_CURRENT_TO_GOAL_GRIPPER_POSE = 23 #plan path to specified gripper pose #as above, but hi-res\n"
"uint8 PLAN_PATH_CURRENT_TO_GOAL_DP_XYZ = 24 #rectilinear translation w/ fixed orientation\n"
"uint8 PLAN_JSPACE_PATH_CURRENT_TO_QGOAL = 25\n"
" \n"
"\n"
"uint8 TIME_RESCALE_PLANNED_TRAJECTORY = 40 #can make arm go slower/faster with provided time-stretch factor\n"
"uint8 REFINE_PLANNED_TRAJECTORY = 41 #if used approx IK soln, use this option to refine solns\n"
"uint8 SET_ARRIVAL_TIME_PLANNED_TRAJECTORY = 42 #used to set desired arrival time; put arrival time value in goal time_scale_stretch_factor\n"
"\n"
"# request to preview plan:\n"
"#uint8 DISPLAY_TRAJECTORY = 50\n"
"\n"
"#MOVE command!\n"
"uint8 EXECUTE_PLANNED_PATH = 100\n"
"\n"
"#uint8 ARM_DESCEND_20CM=101\n"
"#uint8 ARM_DEPART_20CM=102\n"
"\n"
"\n"
"#goal:\n"
"int32 command_code\n"
"geometry_msgs/PoseStamped des_pose_gripper\n"
"float64[] arm_dp #to command a 3-D vector displacement relative to current pose, fixed orientation\n"
"float64[] q_goal\n"
"float64 time_scale_stretch_factor\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cart_moveActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_planner::cart_moveActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::cartesian_planner::cart_moveGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_PLANNER_MESSAGE_CART_MOVEACTIONGOAL_H

// Generated by gencpp from file cartesian_planner/cart_moveResult.msg
// DO NOT EDIT!


#ifndef CARTESIAN_PLANNER_MESSAGE_CART_MOVERESULT_H
#define CARTESIAN_PLANNER_MESSAGE_CART_MOVERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace cartesian_planner
{
template <class ContainerAllocator>
struct cart_moveResult_
{
  typedef cart_moveResult_<ContainerAllocator> Type;

  cart_moveResult_()
    : return_code(0)
    , err_code(0)
    , err_msg()
    , computed_arrival_time(0.0)
    , q_arm()
    , current_pose_gripper()  {
    }
  cart_moveResult_(const ContainerAllocator& _alloc)
    : return_code(0)
    , err_code(0)
    , err_msg(_alloc)
    , computed_arrival_time(0.0)
    , q_arm(_alloc)
    , current_pose_gripper(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _return_code_type;
  _return_code_type return_code;

   typedef int32_t _err_code_type;
  _err_code_type err_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _err_msg_type;
  _err_msg_type err_msg;

   typedef double _computed_arrival_time_type;
  _computed_arrival_time_type computed_arrival_time;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_arm_type;
  _q_arm_type q_arm;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _current_pose_gripper_type;
  _current_pose_gripper_type current_pose_gripper;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(ARM_RECEIVED_AND_INITIATED_RQST)
  #undef ARM_RECEIVED_AND_INITIATED_RQST
#endif
#if defined(_WIN32) && defined(ARM_REQUEST_REJECTED_ALREADY_BUSY)
  #undef ARM_REQUEST_REJECTED_ALREADY_BUSY
#endif
#if defined(_WIN32) && defined(ARM_SERVER_NOT_BUSY)
  #undef ARM_SERVER_NOT_BUSY
#endif
#if defined(_WIN32) && defined(ARM_SERVER_IS_BUSY)
  #undef ARM_SERVER_IS_BUSY
#endif
#if defined(_WIN32) && defined(ARM_RECEIVED_AND_COMPLETED_RQST)
  #undef ARM_RECEIVED_AND_COMPLETED_RQST
#endif
#if defined(_WIN32) && defined(PATH_IS_VALID)
  #undef PATH_IS_VALID
#endif
#if defined(_WIN32) && defined(PATH_NOT_VALID)
  #undef PATH_NOT_VALID
#endif
#if defined(_WIN32) && defined(COMMAND_CODE_NOT_RECOGNIZED)
  #undef COMMAND_CODE_NOT_RECOGNIZED
#endif
#if defined(_WIN32) && defined(ARM_STATUS_UNDEFINED)
  #undef ARM_STATUS_UNDEFINED
#endif
#if defined(_WIN32) && defined(NOT_FINISHED_BEFORE_TIMEOUT)
  #undef NOT_FINISHED_BEFORE_TIMEOUT
#endif

  enum {
    SUCCESS = 0u,
    ARM_RECEIVED_AND_INITIATED_RQST = 1u,
    ARM_REQUEST_REJECTED_ALREADY_BUSY = 2u,
    ARM_SERVER_NOT_BUSY = 3u,
    ARM_SERVER_IS_BUSY = 4u,
    ARM_RECEIVED_AND_COMPLETED_RQST = 5u,
    PATH_IS_VALID = 6u,
    PATH_NOT_VALID = 7u,
    COMMAND_CODE_NOT_RECOGNIZED = 8u,
    ARM_STATUS_UNDEFINED = 9u,
    NOT_FINISHED_BEFORE_TIMEOUT = 10u,
  };


  typedef boost::shared_ptr< ::cartesian_planner::cart_moveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_planner::cart_moveResult_<ContainerAllocator> const> ConstPtr;

}; // struct cart_moveResult_

typedef ::cartesian_planner::cart_moveResult_<std::allocator<void> > cart_moveResult;

typedef boost::shared_ptr< ::cartesian_planner::cart_moveResult > cart_moveResultPtr;
typedef boost::shared_ptr< ::cartesian_planner::cart_moveResult const> cart_moveResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_planner::cart_moveResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartesian_planner::cart_moveResult_<ContainerAllocator1> & lhs, const ::cartesian_planner::cart_moveResult_<ContainerAllocator2> & rhs)
{
  return lhs.return_code == rhs.return_code &&
    lhs.err_code == rhs.err_code &&
    lhs.err_msg == rhs.err_msg &&
    lhs.computed_arrival_time == rhs.computed_arrival_time &&
    lhs.q_arm == rhs.q_arm &&
    lhs.current_pose_gripper == rhs.current_pose_gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartesian_planner::cart_moveResult_<ContainerAllocator1> & lhs, const ::cartesian_planner::cart_moveResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartesian_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_planner::cart_moveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_planner::cart_moveResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_planner::cart_moveResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a878cdb79673e47a4420410bfbf4652";
  }

  static const char* value(const ::cartesian_planner::cart_moveResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a878cdb79673e47ULL;
  static const uint64_t static_value2 = 0xa4420410bfbf4652ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_planner/cart_moveResult";
  }

  static const char* value(const ::cartesian_planner::cart_moveResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result definition\n"
"#  response codes...\n"
"uint8 SUCCESS=0\n"
"\n"
"uint8 ARM_RECEIVED_AND_INITIATED_RQST=1\n"
"uint8 ARM_REQUEST_REJECTED_ALREADY_BUSY=2\n"
"uint8 ARM_SERVER_NOT_BUSY=3\n"
"uint8 ARM_SERVER_IS_BUSY=4\n"
"uint8 ARM_RECEIVED_AND_COMPLETED_RQST=5\n"
"uint8 PATH_IS_VALID=6\n"
"uint8 PATH_NOT_VALID=7\n"
"\n"
"uint8 COMMAND_CODE_NOT_RECOGNIZED=8\n"
"uint8 ARM_STATUS_UNDEFINED=9\n"
"uint8 NOT_FINISHED_BEFORE_TIMEOUT=10\n"
"int32 return_code\n"
"int32 err_code\n"
"string err_msg\n"
"float64 computed_arrival_time\n"
"float64[] q_arm\n"
"geometry_msgs/PoseStamped current_pose_gripper\n"
"#geometry_msgs/PoseStamped current_pose_flange\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cartesian_planner::cart_moveResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.return_code);
      stream.next(m.err_code);
      stream.next(m.err_msg);
      stream.next(m.computed_arrival_time);
      stream.next(m.q_arm);
      stream.next(m.current_pose_gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cart_moveResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_planner::cart_moveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_planner::cart_moveResult_<ContainerAllocator>& v)
  {
    s << indent << "return_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.return_code);
    s << indent << "err_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.err_code);
    s << indent << "err_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.err_msg);
    s << indent << "computed_arrival_time: ";
    Printer<double>::stream(s, indent + "  ", v.computed_arrival_time);
    s << indent << "q_arm[]" << std::endl;
    for (size_t i = 0; i < v.q_arm.size(); ++i)
    {
      s << indent << "  q_arm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_arm[i]);
    }
    s << indent << "current_pose_gripper: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose_gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_PLANNER_MESSAGE_CART_MOVERESULT_H
